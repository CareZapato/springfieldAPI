/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/fetch.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import fetchMock from 'fetch-mock/es5/client';
import { parseQueryParams } from './query';
import { logMock } from './log';
import { handleProxyFn } from './proxy';
/** @type {?} */
export var fallbackToNetworkFetch = (/**
 * @param {?} fallbackToNetwork
 * @return {?}
 */
function (fallbackToNetwork) {
    fetchMock.config.fallbackToNetwork = fallbackToNetwork;
});
/** @type {?} */
export var overwriteRoutesFetch = (/**
 * @param {?} overwriteRoutes
 * @return {?}
 */
function (overwriteRoutes) {
    fetchMock.config.overwriteRoutes = overwriteRoutes;
});
/** @type {?} */
export var createFetchMock = (/**
 * @param {?} mock
 * @param {?} loggingEnabled
 * @param {?} responseProxyFn
 * @return {?}
 */
function (mock, loggingEnabled, responseProxyFn) {
    fetchMock.mock(mock.url, (/**
     * @param {?} url
     * @param {?} fetchMockOptions
     * @return {?}
     */
    function (url, fetchMockOptions) {
        var _a, _b;
        /** @type {?} */
        var body = ((_a = fetchMockOptions) === null || _a === void 0 ? void 0 : _a.body) || {};
        /** @type {?} */
        var headers = ((_b = fetchMockOptions) === null || _b === void 0 ? void 0 : _b.headers) || {};
        /** @type {?} */
        var createdURL = createURL(url);
        // request
        /** @type {?} */
        var requestQuery = parseQueryParams(createdURL !== null
            ? createdURL.search
            : removeAllBeforeChar(url.toString(), '?'));
        /** @type {?} */
        var requestBody = typeof body === 'string' ? JSON.parse(body) : body;
        /** @type {?} */
        var requestHeaders = headers;
        // response
        /** @type {?} */
        var responseBody = mock.responseFn(requestQuery, requestBody);
        /** @type {?} */
        var responseData = handleProxyFn(responseBody, mock, {
            requestQuery: requestQuery,
            requestBody: requestBody,
            requestHeaders: requestHeaders
        }, responseProxyFn);
        /** @type {?} */
        var response = {
            headers: responseData.responseHeaders,
            status: responseData.responseCode,
            body: responseData.responseBody
        };
        if (loggingEnabled) {
            logMock(mock, {
                requestQuery: requestQuery,
                requestBody: requestBody,
                requestHeaders: requestHeaders
            }, responseData);
        }
        return response;
    }), {
        delay: mock.delay
    });
});
/**
 * Tries to create a new instace of URL()
 * @type {?}
 */
var createURL = (/**
 * @param {?} url
 * @return {?}
 */
function (url) {
    try {
        return new URL("" + url);
    }
    catch (_) {
        return null;
    }
});
var ɵ0 = createURL;
/**
 * Removes all chars before specific char (char includes).
 * If char doesn't exist, returns an empty string.
 * @type {?}
 */
var removeAllBeforeChar = (/**
 * @param {?} value
 * @param {?} char
 * @return {?}
 */
function (value, char) {
    if (!value.includes(char)) {
        return '';
    }
    return ("" + value).split(char).pop();
});
var ɵ1 = removeAllBeforeChar;
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmV0Y2guanMiLCJzb3VyY2VSb290Ijoibmc6Ly9odHRwLW1vY2tzLyIsInNvdXJjZXMiOlsibGliL3V0aWxzL2ZldGNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBS0EsT0FBTyxTQUFTLE1BQU0sdUJBQXVCLENBQUM7QUFFOUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRTNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFFaEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFNBQVMsQ0FBQzs7QUFJeEMsTUFBTSxLQUFPLHNCQUFzQjs7OztBQUFHLFVBQUMsaUJBQTBCO0lBQy9ELFNBQVMsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEdBQUcsaUJBQWlCLENBQUM7QUFDekQsQ0FBQyxDQUFBOztBQUVELE1BQU0sS0FBTyxvQkFBb0I7Ozs7QUFBRyxVQUFDLGVBQXdCO0lBQzNELFNBQVMsQ0FBQyxNQUFNLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztBQUNyRCxDQUFDLENBQUE7O0FBRUQsTUFBTSxLQUFPLGVBQWU7Ozs7OztBQUFHLFVBQzdCLElBQVUsRUFDVixjQUF1QixFQUN2QixlQUErQztJQUUvQyxTQUFTLENBQUMsSUFBSSxDQUNaLElBQUksQ0FBQyxHQUFHOzs7OztJQUNSLFVBQUMsR0FBVyxFQUFFLGdCQUFrQzs7O1lBQ3hDLElBQUksR0FBRyxPQUFBLGdCQUFnQiwwQ0FBRSxJQUFJLEtBQUksRUFBRTs7WUFDbkMsT0FBTyxHQUFHLE9BQUEsZ0JBQWdCLDBDQUFFLE9BQU8sS0FBSSxFQUFFOztZQUN6QyxVQUFVLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQzs7O1lBRzNCLFlBQVksR0FBRyxnQkFBZ0IsQ0FDbkMsVUFBVSxLQUFLLElBQUk7WUFDakIsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNO1lBQ25CLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQzdDOztZQUNLLFdBQVcsR0FBRyxPQUFPLElBQUksS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUk7O1lBQ2hFLGNBQWMsR0FBRyxPQUFPOzs7WUFHeEIsWUFBWSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFLFdBQVcsQ0FBQzs7WUFDekQsWUFBWSxHQUFpQixhQUFhLENBQzlDLFlBQVksRUFDWixJQUFJLEVBQ0o7WUFDRSxZQUFZLGNBQUE7WUFDWixXQUFXLGFBQUE7WUFDWCxjQUFjLGdCQUFBO1NBQ2YsRUFDRCxlQUFlLENBQ2hCOztZQUVLLFFBQVEsR0FBc0I7WUFDbEMsT0FBTyxFQUFFLFlBQVksQ0FBQyxlQUFlO1lBQ3JDLE1BQU0sRUFBRSxZQUFZLENBQUMsWUFBWTtZQUNqQyxJQUFJLEVBQUUsWUFBWSxDQUFDLFlBQVk7U0FDaEM7UUFFRCxJQUFJLGNBQWMsRUFBRTtZQUNsQixPQUFPLENBQ0wsSUFBSSxFQUNKO2dCQUNFLFlBQVksY0FBQTtnQkFDWixXQUFXLGFBQUE7Z0JBQ1gsY0FBYyxnQkFBQTthQUNmLEVBQ0QsWUFBWSxDQUNiLENBQUM7U0FDSDtRQUVELE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUMsR0FDRDtRQUNFLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztLQUNsQixDQUNGLENBQUM7QUFDSixDQUFDLENBQUE7Ozs7O0lBS0ssU0FBUzs7OztBQUFHLFVBQUMsR0FBb0I7SUFDckMsSUFBSTtRQUNGLE9BQU8sSUFBSSxHQUFHLENBQUMsS0FBRyxHQUFLLENBQUMsQ0FBQztLQUMxQjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsT0FBTyxJQUFJLENBQUM7S0FDYjtBQUNILENBQUMsQ0FBQTs7Ozs7OztJQU1LLG1CQUFtQjs7Ozs7QUFBRyxVQUFDLEtBQWEsRUFBRSxJQUFZO0lBQ3RELElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ3pCLE9BQU8sRUFBRSxDQUFDO0tBQ1g7SUFFRCxPQUFPLENBQUEsS0FBRyxLQUFPLENBQUEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDdEMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgTW9ja09wdGlvbnMgYXMgRmV0Y2hNb2NrT3B0aW9ucyxcbiAgTW9ja1Jlc3BvbnNlIGFzIEZldGNoTW9ja1Jlc3BvbnNlXG59IGZyb20gJ2ZldGNoLW1vY2snO1xuXG5pbXBvcnQgZmV0Y2hNb2NrIGZyb20gJ2ZldGNoLW1vY2svZXM1L2NsaWVudCc7XG5cbmltcG9ydCB7IHBhcnNlUXVlcnlQYXJhbXMgfSBmcm9tICcuL3F1ZXJ5JztcblxuaW1wb3J0IHsgbG9nTW9jayB9IGZyb20gJy4vbG9nJztcblxuaW1wb3J0IHsgaGFuZGxlUHJveHlGbiB9IGZyb20gJy4vcHJveHknO1xuXG5pbXBvcnQgeyBNb2NrLCBNb2NrT3B0aW9ucywgTW9ja1Jlc3BvbnNlIH0gZnJvbSAnLi8uLi9odHRwLW1vY2tzLm1vZGVsJztcblxuZXhwb3J0IGNvbnN0IGZhbGxiYWNrVG9OZXR3b3JrRmV0Y2ggPSAoZmFsbGJhY2tUb05ldHdvcms6IGJvb2xlYW4pID0+IHtcbiAgZmV0Y2hNb2NrLmNvbmZpZy5mYWxsYmFja1RvTmV0d29yayA9IGZhbGxiYWNrVG9OZXR3b3JrO1xufTtcblxuZXhwb3J0IGNvbnN0IG92ZXJ3cml0ZVJvdXRlc0ZldGNoID0gKG92ZXJ3cml0ZVJvdXRlczogYm9vbGVhbikgPT4ge1xuICBmZXRjaE1vY2suY29uZmlnLm92ZXJ3cml0ZVJvdXRlcyA9IG92ZXJ3cml0ZVJvdXRlcztcbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVGZXRjaE1vY2sgPSAoXG4gIG1vY2s6IE1vY2ssXG4gIGxvZ2dpbmdFbmFibGVkOiBib29sZWFuLFxuICByZXNwb25zZVByb3h5Rm46IE1vY2tPcHRpb25zWydyZXNwb25zZVByb3h5Rm4nXVxuKTogdm9pZCA9PiB7XG4gIGZldGNoTW9jay5tb2NrKFxuICAgIG1vY2sudXJsLFxuICAgICh1cmw6IFJlZ0V4cCwgZmV0Y2hNb2NrT3B0aW9uczogRmV0Y2hNb2NrT3B0aW9ucykgPT4ge1xuICAgICAgY29uc3QgYm9keSA9IGZldGNoTW9ja09wdGlvbnM/LmJvZHkgfHwge307XG4gICAgICBjb25zdCBoZWFkZXJzID0gZmV0Y2hNb2NrT3B0aW9ucz8uaGVhZGVycyB8fCB7fTtcbiAgICAgIGNvbnN0IGNyZWF0ZWRVUkwgPSBjcmVhdGVVUkwodXJsKTtcblxuICAgICAgLy8gcmVxdWVzdFxuICAgICAgY29uc3QgcmVxdWVzdFF1ZXJ5ID0gcGFyc2VRdWVyeVBhcmFtcyhcbiAgICAgICAgY3JlYXRlZFVSTCAhPT0gbnVsbFxuICAgICAgICAgID8gY3JlYXRlZFVSTC5zZWFyY2hcbiAgICAgICAgICA6IHJlbW92ZUFsbEJlZm9yZUNoYXIodXJsLnRvU3RyaW5nKCksICc/JylcbiAgICAgICk7XG4gICAgICBjb25zdCByZXF1ZXN0Qm9keSA9IHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJyA/IEpTT04ucGFyc2UoYm9keSkgOiBib2R5O1xuICAgICAgY29uc3QgcmVxdWVzdEhlYWRlcnMgPSBoZWFkZXJzO1xuXG4gICAgICAvLyByZXNwb25zZVxuICAgICAgY29uc3QgcmVzcG9uc2VCb2R5ID0gbW9jay5yZXNwb25zZUZuKHJlcXVlc3RRdWVyeSwgcmVxdWVzdEJvZHkpO1xuICAgICAgY29uc3QgcmVzcG9uc2VEYXRhOiBNb2NrUmVzcG9uc2UgPSBoYW5kbGVQcm94eUZuKFxuICAgICAgICByZXNwb25zZUJvZHksXG4gICAgICAgIG1vY2ssXG4gICAgICAgIHtcbiAgICAgICAgICByZXF1ZXN0UXVlcnksXG4gICAgICAgICAgcmVxdWVzdEJvZHksXG4gICAgICAgICAgcmVxdWVzdEhlYWRlcnNcbiAgICAgICAgfSxcbiAgICAgICAgcmVzcG9uc2VQcm94eUZuXG4gICAgICApO1xuXG4gICAgICBjb25zdCByZXNwb25zZTogRmV0Y2hNb2NrUmVzcG9uc2UgPSB7XG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlRGF0YS5yZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIHN0YXR1czogcmVzcG9uc2VEYXRhLnJlc3BvbnNlQ29kZSxcbiAgICAgICAgYm9keTogcmVzcG9uc2VEYXRhLnJlc3BvbnNlQm9keVxuICAgICAgfTtcblxuICAgICAgaWYgKGxvZ2dpbmdFbmFibGVkKSB7XG4gICAgICAgIGxvZ01vY2soXG4gICAgICAgICAgbW9jayxcbiAgICAgICAgICB7XG4gICAgICAgICAgICByZXF1ZXN0UXVlcnksXG4gICAgICAgICAgICByZXF1ZXN0Qm9keSxcbiAgICAgICAgICAgIHJlcXVlc3RIZWFkZXJzXG4gICAgICAgICAgfSxcbiAgICAgICAgICByZXNwb25zZURhdGFcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH0sXG4gICAge1xuICAgICAgZGVsYXk6IG1vY2suZGVsYXlcbiAgICB9XG4gICk7XG59O1xuXG4vKipcbiAqIFRyaWVzIHRvIGNyZWF0ZSBhIG5ldyBpbnN0YWNlIG9mIFVSTCgpXG4gKi9cbmNvbnN0IGNyZWF0ZVVSTCA9ICh1cmw6IFJlZ0V4cCB8IHN0cmluZyk6IFVSTCB8IG51bGwgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiBuZXcgVVJMKGAke3VybH1gKTtcbiAgfSBjYXRjaCAoXykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGNoYXJzIGJlZm9yZSBzcGVjaWZpYyBjaGFyIChjaGFyIGluY2x1ZGVzKS5cbiAqIElmIGNoYXIgZG9lc24ndCBleGlzdCwgcmV0dXJucyBhbiBlbXB0eSBzdHJpbmcuXG4gKi9cbmNvbnN0IHJlbW92ZUFsbEJlZm9yZUNoYXIgPSAodmFsdWU6IHN0cmluZywgY2hhcjogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgaWYgKCF2YWx1ZS5pbmNsdWRlcyhjaGFyKSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHJldHVybiBgJHt2YWx1ZX1gLnNwbGl0KGNoYXIpLnBvcCgpO1xufTtcbiJdfQ==