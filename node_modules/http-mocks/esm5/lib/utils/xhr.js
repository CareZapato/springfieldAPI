/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/xhr.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __awaiter, __generator } from "tslib";
import xhrMock, { proxy } from 'xhr-mock';
import { delay } from './delay';
import { logMock } from './log';
import { handleProxyFn } from './proxy';
/** @type {?} */
export var setupXHRMock = (/**
 * @return {?}
 */
function () {
    xhrMock.setup();
});
/** @type {?} */
export var fallbackToNetworkXHR = (/**
 * @param {?} fallbackToNetwork
 * @return {?}
 */
function (fallbackToNetwork) {
    if (fallbackToNetwork) {
        xhrMock.use(proxy);
    }
});
/** @type {?} */
export var createXHRMock = (/**
 * @param {?} mock
 * @param {?} loggingEnabled
 * @param {?=} responseProxyFn
 * @return {?}
 */
function (mock, loggingEnabled, responseProxyFn) {
    xhrMock.use(mock.method, mock.url, (/**
     * @param {?} mockRequest
     * @param {?} mockResponse
     * @return {?}
     */
    function (mockRequest, mockResponse) { return __awaiter(void 0, void 0, void 0, function () {
        var requestQuery, requestBody, requestHeaders, responseBody, responseData, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // request
                    requestQuery = mockRequest.url().query || {};
                    requestBody = mockRequest.body() != null ? JSON.parse(mockRequest.body()) : {};
                    requestHeaders = mockRequest.headers();
                    // response
                    responseBody = mock.responseFn(requestQuery, requestBody);
                    responseData = handleProxyFn(responseBody, mock, {
                        requestQuery: requestQuery,
                        requestBody: requestBody,
                        requestHeaders: requestHeaders
                    }, responseProxyFn);
                    response = mockResponse
                        .status(responseData.responseCode)
                        .body(responseData.responseBody)
                        .headers(responseData.responseHeaders);
                    return [4 /*yield*/, delay(mock.delay)];
                case 1:
                    _a.sent();
                    if (loggingEnabled) {
                        logMock(mock, {
                            requestQuery: requestQuery,
                            requestBody: requestBody,
                            requestHeaders: requestHeaders
                        }, responseData);
                    }
                    return [2 /*return*/, response];
            }
        });
    }); }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieGhyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vaHR0cC1tb2Nrcy8iLCJzb3VyY2VzIjpbImxpYi91dGlscy94aHIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxPQUFPLEVBQUUsRUFHZCxLQUFLLEVBQ04sTUFBTSxVQUFVLENBQUM7QUFFbEIsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUVoQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBRWhDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxTQUFTLENBQUM7O0FBSXhDLE1BQU0sS0FBTyxZQUFZOzs7QUFBRztJQUMxQixPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDbEIsQ0FBQyxDQUFBOztBQUVELE1BQU0sS0FBTyxvQkFBb0I7Ozs7QUFBRyxVQUFDLGlCQUEwQjtJQUM3RCxJQUFJLGlCQUFpQixFQUFFO1FBQ3JCLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDLENBQUE7O0FBRUQsTUFBTSxLQUFPLGFBQWE7Ozs7OztBQUFHLFVBQzNCLElBQVUsRUFDVixjQUF1QixFQUN2QixlQUFnRDtJQUVoRCxPQUFPLENBQUMsR0FBRyxDQUNULElBQUksQ0FBQyxNQUFNLEVBQ1gsSUFBSSxDQUFDLEdBQUc7Ozs7O0lBQ1IsVUFBTyxXQUEyQixFQUFFLFlBQTZCOzs7Ozs7b0JBRXpELFlBQVksR0FBRyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxJQUFJLEVBQUU7b0JBQzVDLFdBQVcsR0FDZixXQUFXLENBQUMsSUFBSSxFQUFFLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUM1RCxjQUFjLEdBQUcsV0FBVyxDQUFDLE9BQU8sRUFBRTs7b0JBR3RDLFlBQVksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxXQUFXLENBQUM7b0JBQ3pELFlBQVksR0FBaUIsYUFBYSxDQUM5QyxZQUFZLEVBQ1osSUFBSSxFQUNKO3dCQUNFLFlBQVksY0FBQTt3QkFDWixXQUFXLGFBQUE7d0JBQ1gsY0FBYyxnQkFBQTtxQkFDZixFQUNELGVBQWUsQ0FDaEI7b0JBRUssUUFBUSxHQUFHLFlBQVk7eUJBQzFCLE1BQU0sQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDO3lCQUNqQyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQzt5QkFDL0IsT0FBTyxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUM7b0JBRXhDLHFCQUFNLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUE7O29CQUF2QixTQUF1QixDQUFDO29CQUV4QixJQUFJLGNBQWMsRUFBRTt3QkFDbEIsT0FBTyxDQUNMLElBQUksRUFDSjs0QkFDRSxZQUFZLGNBQUE7NEJBQ1osV0FBVyxhQUFBOzRCQUNYLGNBQWMsZ0JBQUE7eUJBQ2YsRUFDRCxZQUFZLENBQ2IsQ0FBQztxQkFDSDtvQkFFRCxzQkFBTyxRQUFRLEVBQUM7OztTQUNqQixFQUNGLENBQUM7QUFDSixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeGhyTW9jaywge1xuICBNb2NrUmVxdWVzdCBhcyBYaHJNb2NrUmVxdWVzdCxcbiAgTW9ja1Jlc3BvbnNlIGFzIFhock1vY2tSZXNwb25zZSxcbiAgcHJveHlcbn0gZnJvbSAneGhyLW1vY2snO1xuXG5pbXBvcnQgeyBkZWxheSB9IGZyb20gJy4vZGVsYXknO1xuXG5pbXBvcnQgeyBsb2dNb2NrIH0gZnJvbSAnLi9sb2cnO1xuXG5pbXBvcnQgeyBoYW5kbGVQcm94eUZuIH0gZnJvbSAnLi9wcm94eSc7XG5cbmltcG9ydCB7IE1vY2ssIE1vY2tPcHRpb25zLCBNb2NrUmVzcG9uc2UgfSBmcm9tICcuLy4uL2h0dHAtbW9ja3MubW9kZWwnO1xuXG5leHBvcnQgY29uc3Qgc2V0dXBYSFJNb2NrID0gKCk6IHZvaWQgPT4ge1xuICB4aHJNb2NrLnNldHVwKCk7XG59O1xuXG5leHBvcnQgY29uc3QgZmFsbGJhY2tUb05ldHdvcmtYSFIgPSAoZmFsbGJhY2tUb05ldHdvcms6IGJvb2xlYW4pID0+IHtcbiAgaWYgKGZhbGxiYWNrVG9OZXR3b3JrKSB7XG4gICAgeGhyTW9jay51c2UocHJveHkpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgY3JlYXRlWEhSTW9jayA9IChcbiAgbW9jazogTW9jayxcbiAgbG9nZ2luZ0VuYWJsZWQ6IGJvb2xlYW4sXG4gIHJlc3BvbnNlUHJveHlGbj86IE1vY2tPcHRpb25zWydyZXNwb25zZVByb3h5Rm4nXVxuKTogdm9pZCA9PiB7XG4gIHhock1vY2sudXNlKFxuICAgIG1vY2subWV0aG9kLFxuICAgIG1vY2sudXJsLFxuICAgIGFzeW5jIChtb2NrUmVxdWVzdDogWGhyTW9ja1JlcXVlc3QsIG1vY2tSZXNwb25zZTogWGhyTW9ja1Jlc3BvbnNlKSA9PiB7XG4gICAgICAvLyByZXF1ZXN0XG4gICAgICBjb25zdCByZXF1ZXN0UXVlcnkgPSBtb2NrUmVxdWVzdC51cmwoKS5xdWVyeSB8fCB7fTtcbiAgICAgIGNvbnN0IHJlcXVlc3RCb2R5ID1cbiAgICAgICAgbW9ja1JlcXVlc3QuYm9keSgpICE9IG51bGwgPyBKU09OLnBhcnNlKG1vY2tSZXF1ZXN0LmJvZHkoKSkgOiB7fTtcbiAgICAgIGNvbnN0IHJlcXVlc3RIZWFkZXJzID0gbW9ja1JlcXVlc3QuaGVhZGVycygpO1xuXG4gICAgICAvLyByZXNwb25zZVxuICAgICAgY29uc3QgcmVzcG9uc2VCb2R5ID0gbW9jay5yZXNwb25zZUZuKHJlcXVlc3RRdWVyeSwgcmVxdWVzdEJvZHkpO1xuICAgICAgY29uc3QgcmVzcG9uc2VEYXRhOiBNb2NrUmVzcG9uc2UgPSBoYW5kbGVQcm94eUZuKFxuICAgICAgICByZXNwb25zZUJvZHksXG4gICAgICAgIG1vY2ssXG4gICAgICAgIHtcbiAgICAgICAgICByZXF1ZXN0UXVlcnksXG4gICAgICAgICAgcmVxdWVzdEJvZHksXG4gICAgICAgICAgcmVxdWVzdEhlYWRlcnNcbiAgICAgICAgfSxcbiAgICAgICAgcmVzcG9uc2VQcm94eUZuXG4gICAgICApO1xuXG4gICAgICBjb25zdCByZXNwb25zZSA9IG1vY2tSZXNwb25zZVxuICAgICAgICAuc3RhdHVzKHJlc3BvbnNlRGF0YS5yZXNwb25zZUNvZGUpXG4gICAgICAgIC5ib2R5KHJlc3BvbnNlRGF0YS5yZXNwb25zZUJvZHkpXG4gICAgICAgIC5oZWFkZXJzKHJlc3BvbnNlRGF0YS5yZXNwb25zZUhlYWRlcnMpO1xuXG4gICAgICBhd2FpdCBkZWxheShtb2NrLmRlbGF5KTtcblxuICAgICAgaWYgKGxvZ2dpbmdFbmFibGVkKSB7XG4gICAgICAgIGxvZ01vY2soXG4gICAgICAgICAgbW9jayxcbiAgICAgICAgICB7XG4gICAgICAgICAgICByZXF1ZXN0UXVlcnksXG4gICAgICAgICAgICByZXF1ZXN0Qm9keSxcbiAgICAgICAgICAgIHJlcXVlc3RIZWFkZXJzXG4gICAgICAgICAgfSxcbiAgICAgICAgICByZXNwb25zZURhdGFcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbiAgKTtcbn07XG4iXX0=