/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/delay.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// SOURCE: https://github.com/sindresorhus/delay
/**
 * @record
 */
function AbortSignal() { }
if (false) {
    /** @type {?} */
    AbortSignal.prototype.aborted;
    /**
     * @param {?} type
     * @param {?} listener
     * @param {?=} options
     * @return {?}
     */
    AbortSignal.prototype.addEventListener = function (type, listener, options) { };
    /**
     * @param {?} type
     * @param {?} listener
     * @return {?}
     */
    AbortSignal.prototype.removeEventListener = function (type, listener) { };
}
/**
 * @record
 */
function Options() { }
if (false) {
    /** @type {?|undefined} */
    Options.prototype.signal;
}
/**
 * @record
 * @template T
 */
function ClearablePromise() { }
if (false) {
    /**
     * @return {?}
     */
    ClearablePromise.prototype.clear = function () { };
}
/**
 * @record
 */
function Delay() { }
if (false) {
    /** @type {?|undefined} */
    Delay.prototype.reject;
    /** @type {?|undefined} */
    Delay.prototype.createWithTimers;
    /* Skipping unhandled member: (milliseconds: number, options?: Options): ClearablePromise<void>;*/
    /* Skipping unhandled member: <T>(
        milliseconds: number,
        options?: Options & {
          value: T;
        }
      ): ClearablePromise<T>;*/
}
/** @type {?} */
var createAbortError = (/**
 * @return {?}
 */
function () {
    /** @type {?} */
    var error = new Error('Delay aborted');
    error.name = 'AbortError';
    return error;
});
var ɵ0 = createAbortError;
/** @type {?} */
export var createDelay = (/**
 * @param {?} __0
 * @return {?}
 */
function (_a) {
    var defaultClear = _a.clearTimeout, set = _a.setTimeout, willResolve = _a.willResolve;
    return (/**
     * @param {?} ms
     * @param {?=} __1
     * @return {?}
     */
    function (ms, _a) {
        var _b = _a === void 0 ? (/** @type {?} */ ({})) : _a, value = _b.value, signal = _b.signal;
        if (signal && signal.aborted) {
            return Promise.reject(createAbortError());
        }
        /** @type {?} */
        var timeoutId;
        /** @type {?} */
        var settle;
        /** @type {?} */
        var rejectFn;
        /** @type {?} */
        var clear = defaultClear || clearTimeout;
        /** @type {?} */
        var signalListener = (/**
         * @return {?}
         */
        function () {
            clear(timeoutId);
            rejectFn(createAbortError());
        });
        /** @type {?} */
        var cleanup = (/**
         * @return {?}
         */
        function () {
            if (signal) {
                signal.removeEventListener('abort', signalListener);
            }
        });
        /** @type {?} */
        var delayPromise = new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            settle = (/**
             * @return {?}
             */
            function () {
                cleanup();
                if (willResolve) {
                    resolve(value);
                }
                else {
                    reject(value);
                }
            });
            rejectFn = reject;
            timeoutId = (set || setTimeout)(settle, ms);
        }));
        if (signal) {
            signal.addEventListener('abort', signalListener, { once: true });
        }
        delayPromise.clear = (/**
         * @return {?}
         */
        function () {
            clear(timeoutId);
            timeoutId = null;
            settle();
        });
        return delayPromise;
    });
});
/** @type {?} */
export var delay = createDelay({ willResolve: true });
delay.reject = createDelay({ willResolve: false });
delay.createWithTimers = (/**
 * @param {?} __0
 * @return {?}
 */
function (_a) {
    var clearTimeout = _a.clearTimeout, setTimeout = _a.setTimeout;
    /** @type {?} */
    var innerDelay = createDelay({
        clearTimeout: clearTimeout,
        setTimeout: setTimeout,
        willResolve: true
    });
    innerDelay.reject = createDelay({
        clearTimeout: clearTimeout,
        setTimeout: setTimeout,
        willResolve: false
    });
    return innerDelay;
});
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsYXkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9odHRwLW1vY2tzLyIsInNvdXJjZXMiOlsibGliL3V0aWxzL2RlbGF5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUVBLDBCQVFDOzs7SUFQQyw4QkFBMEI7Ozs7Ozs7SUFDMUIsZ0ZBSVE7Ozs7OztJQUNSLDBFQUErRDs7Ozs7QUFHakUsc0JBRUM7OztJQURDLHlCQUFxQjs7Ozs7O0FBR3ZCLCtCQUVDOzs7OztJQURDLG1EQUFjOzs7OztBQUdoQixvQkFxQkM7OztJQVhDLHVCQUs2Qjs7SUFFN0IsaUNBR1k7Ozs7Ozs7Ozs7SUFHUixnQkFBZ0I7OztBQUFHOztRQUNqQixLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsZUFBZSxDQUFDO0lBQ3hDLEtBQUssQ0FBQyxJQUFJLEdBQUcsWUFBWSxDQUFDO0lBQzFCLE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyxDQUFBOzs7QUFFRCxNQUFNLEtBQU8sV0FBVzs7OztBQUFHLFVBQUMsRUFJdEI7UUFISiw4QkFBMEIsRUFDMUIsbUJBQWUsRUFDZiw0QkFBVzs7Ozs7O0lBQ0YsVUFBQyxFQUFVLEVBQUUsRUFBNkI7WUFBN0IsaURBQTZCLEVBQTNCLGdCQUFLLEVBQUUsa0JBQU07UUFDckMsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRTtZQUM1QixPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO1NBQzNDOztZQUVHLFNBQVM7O1lBQ1QsTUFBTTs7WUFDTixRQUFROztZQUNOLEtBQUssR0FBRyxZQUFZLElBQUksWUFBWTs7WUFFcEMsY0FBYzs7O1FBQUc7WUFDckIsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ2pCLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFBOztZQUVLLE9BQU87OztRQUFHO1lBQ2QsSUFBSSxNQUFNLEVBQUU7Z0JBQ1YsTUFBTSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxjQUFjLENBQUMsQ0FBQzthQUNyRDtRQUNILENBQUMsQ0FBQTs7WUFFSyxZQUFZLEdBQVEsSUFBSSxPQUFPOzs7OztRQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU07WUFDcEQsTUFBTTs7O1lBQUc7Z0JBQ1AsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsSUFBSSxXQUFXLEVBQUU7b0JBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUNoQjtxQkFBTTtvQkFDTCxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ2Y7WUFDSCxDQUFDLENBQUEsQ0FBQztZQUVGLFFBQVEsR0FBRyxNQUFNLENBQUM7WUFDbEIsU0FBUyxHQUFHLENBQUMsR0FBRyxJQUFJLFVBQVUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM5QyxDQUFDLEVBQUM7UUFFRixJQUFJLE1BQU0sRUFBRTtZQUNWLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsY0FBYyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7U0FDbEU7UUFFRCxZQUFZLENBQUMsS0FBSzs7O1FBQUc7WUFDbkIsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ2pCLFNBQVMsR0FBRyxJQUFJLENBQUM7WUFDakIsTUFBTSxFQUFFLENBQUM7UUFDWCxDQUFDLENBQUEsQ0FBQztRQUVGLE9BQU8sWUFBWSxDQUFDO0lBQ3RCLENBQUM7Q0FBQSxDQUFBOztBQUVELE1BQU0sS0FBTyxLQUFLLEdBQVUsV0FBVyxDQUFDLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxDQUFDO0FBRTlELEtBQUssQ0FBQyxNQUFNLEdBQUcsV0FBVyxDQUFDLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7QUFDbkQsS0FBSyxDQUFDLGdCQUFnQjs7OztBQUFHLFVBQUMsRUFBNEI7UUFBMUIsOEJBQVksRUFBRSwwQkFBVTs7UUFDNUMsVUFBVSxHQUFVLFdBQVcsQ0FBQztRQUNwQyxZQUFZLGNBQUE7UUFDWixVQUFVLFlBQUE7UUFDVixXQUFXLEVBQUUsSUFBSTtLQUNsQixDQUFDO0lBQ0YsVUFBVSxDQUFDLE1BQU0sR0FBRyxXQUFXLENBQUM7UUFDOUIsWUFBWSxjQUFBO1FBQ1osVUFBVSxZQUFBO1FBQ1YsV0FBVyxFQUFFLEtBQUs7S0FDbkIsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxVQUFVLENBQUM7QUFDcEIsQ0FBQyxDQUFBLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTT1VSQ0U6IGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvZGVsYXlcblxuaW50ZXJmYWNlIEFib3J0U2lnbmFsIHtcbiAgcmVhZG9ubHkgYWJvcnRlZDogYm9vbGVhbjtcbiAgYWRkRXZlbnRMaXN0ZW5lcihcbiAgICB0eXBlOiAnYWJvcnQnLFxuICAgIGxpc3RlbmVyOiAoKSA9PiB2b2lkLFxuICAgIG9wdGlvbnM/OiB7IG9uY2U/OiBib29sZWFuIH1cbiAgKTogdm9pZDtcbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlOiAnYWJvcnQnLCBsaXN0ZW5lcjogKCkgPT4gdm9pZCk6IHZvaWQ7XG59XG5cbmludGVyZmFjZSBPcHRpb25zIHtcbiAgc2lnbmFsPzogQWJvcnRTaWduYWw7XG59XG5cbmludGVyZmFjZSBDbGVhcmFibGVQcm9taXNlPFQ+IGV4dGVuZHMgUHJvbWlzZTxUPiB7XG4gIGNsZWFyKCk6IHZvaWQ7XG59XG5cbmludGVyZmFjZSBEZWxheSB7XG4gIChtaWxsaXNlY29uZHM6IG51bWJlciwgb3B0aW9ucz86IE9wdGlvbnMpOiBDbGVhcmFibGVQcm9taXNlPHZvaWQ+O1xuXG4gIDxUPihcbiAgICBtaWxsaXNlY29uZHM6IG51bWJlcixcbiAgICBvcHRpb25zPzogT3B0aW9ucyAmIHtcbiAgICAgIHZhbHVlOiBUO1xuICAgIH1cbiAgKTogQ2xlYXJhYmxlUHJvbWlzZTxUPjtcblxuICByZWplY3Q/OiAoXG4gICAgbWlsbGlzZWNvbmRzOiBudW1iZXIsXG4gICAgb3B0aW9ucz86IE9wdGlvbnMgJiB7XG4gICAgICB2YWx1ZT86IHVua25vd247XG4gICAgfVxuICApID0+IENsZWFyYWJsZVByb21pc2U8bmV2ZXI+O1xuXG4gIGNyZWF0ZVdpdGhUaW1lcnM/OiAodGltZXJzOiB7XG4gICAgY2xlYXJUaW1lb3V0OiB0eXBlb2YgY2xlYXJUaW1lb3V0O1xuICAgIHNldFRpbWVvdXQ6IHR5cGVvZiBzZXRUaW1lb3V0O1xuICB9KSA9PiBEZWxheTtcbn1cblxuY29uc3QgY3JlYXRlQWJvcnRFcnJvciA9ICgpID0+IHtcbiAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoJ0RlbGF5IGFib3J0ZWQnKTtcbiAgZXJyb3IubmFtZSA9ICdBYm9ydEVycm9yJztcbiAgcmV0dXJuIGVycm9yO1xufTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZURlbGF5ID0gKHtcbiAgY2xlYXJUaW1lb3V0OiBkZWZhdWx0Q2xlYXIsXG4gIHNldFRpbWVvdXQ6IHNldCxcbiAgd2lsbFJlc29sdmVcbn06IGFueSkgPT4gKG1zOiBudW1iZXIsIHsgdmFsdWUsIHNpZ25hbCB9ID0ge30gYXMgYW55KSA9PiB7XG4gIGlmIChzaWduYWwgJiYgc2lnbmFsLmFib3J0ZWQpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoY3JlYXRlQWJvcnRFcnJvcigpKTtcbiAgfVxuXG4gIGxldCB0aW1lb3V0SWQ7XG4gIGxldCBzZXR0bGU7XG4gIGxldCByZWplY3RGbjtcbiAgY29uc3QgY2xlYXIgPSBkZWZhdWx0Q2xlYXIgfHwgY2xlYXJUaW1lb3V0O1xuXG4gIGNvbnN0IHNpZ25hbExpc3RlbmVyID0gKCkgPT4ge1xuICAgIGNsZWFyKHRpbWVvdXRJZCk7XG4gICAgcmVqZWN0Rm4oY3JlYXRlQWJvcnRFcnJvcigpKTtcbiAgfTtcblxuICBjb25zdCBjbGVhbnVwID0gKCkgPT4ge1xuICAgIGlmIChzaWduYWwpIHtcbiAgICAgIHNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIHNpZ25hbExpc3RlbmVyKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgZGVsYXlQcm9taXNlOiBhbnkgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgc2V0dGxlID0gKCkgPT4ge1xuICAgICAgY2xlYW51cCgpO1xuICAgICAgaWYgKHdpbGxSZXNvbHZlKSB7XG4gICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVqZWN0KHZhbHVlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmVqZWN0Rm4gPSByZWplY3Q7XG4gICAgdGltZW91dElkID0gKHNldCB8fCBzZXRUaW1lb3V0KShzZXR0bGUsIG1zKTtcbiAgfSk7XG5cbiAgaWYgKHNpZ25hbCkge1xuICAgIHNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIHNpZ25hbExpc3RlbmVyLCB7IG9uY2U6IHRydWUgfSk7XG4gIH1cblxuICBkZWxheVByb21pc2UuY2xlYXIgPSAoKSA9PiB7XG4gICAgY2xlYXIodGltZW91dElkKTtcbiAgICB0aW1lb3V0SWQgPSBudWxsO1xuICAgIHNldHRsZSgpO1xuICB9O1xuXG4gIHJldHVybiBkZWxheVByb21pc2U7XG59O1xuXG5leHBvcnQgY29uc3QgZGVsYXk6IERlbGF5ID0gY3JlYXRlRGVsYXkoeyB3aWxsUmVzb2x2ZTogdHJ1ZSB9KTtcblxuZGVsYXkucmVqZWN0ID0gY3JlYXRlRGVsYXkoeyB3aWxsUmVzb2x2ZTogZmFsc2UgfSk7XG5kZWxheS5jcmVhdGVXaXRoVGltZXJzID0gKHsgY2xlYXJUaW1lb3V0LCBzZXRUaW1lb3V0IH0pID0+IHtcbiAgY29uc3QgaW5uZXJEZWxheTogRGVsYXkgPSBjcmVhdGVEZWxheSh7XG4gICAgY2xlYXJUaW1lb3V0LFxuICAgIHNldFRpbWVvdXQsXG4gICAgd2lsbFJlc29sdmU6IHRydWVcbiAgfSk7XG4gIGlubmVyRGVsYXkucmVqZWN0ID0gY3JlYXRlRGVsYXkoe1xuICAgIGNsZWFyVGltZW91dCxcbiAgICBzZXRUaW1lb3V0LFxuICAgIHdpbGxSZXNvbHZlOiBmYWxzZVxuICB9KTtcbiAgcmV0dXJuIGlubmVyRGVsYXk7XG59O1xuIl19