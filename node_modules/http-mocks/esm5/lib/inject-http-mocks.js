/**
 * @fileoverview added by tsickle
 * Generated from: lib/inject-http-mocks.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __assign, __read, __spread } from "tslib";
import { fallbackToNetworkFetch, overwriteRoutesFetch, createFetchMock, parseQueryParams, setupXHRMock, fallbackToNetworkXHR, createXHRMock } from './utils';
/**
 * Main `http-mocks` method that handles entire creation of mocks for XHR and Fetch API.
 * @type {?}
 */
export var injectHttpMocks = (/**
 * @param {?} mockScenarios
 * @param {?=} __1
 * @return {?}
 */
function (mockScenarios, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.fallbackToNetwork, fallbackToNetwork = _c === void 0 ? true : _c, _d = _b.loggingEnabled, loggingEnabled = _d === void 0 ? false : _d, _e = _b.useLocationHash, useLocationHash = _e === void 0 ? false : _e, _f = _b.mockScenario, mockScenario = _f === void 0 ? extractMockScenarioFromLocation(window.location, useLocationHash) : _f, _g = _b.defaultResponseCode, defaultResponseCode = _g === void 0 ? 200 : _g, _h = _b.defaultResponseHeaders, defaultResponseHeaders = _h === void 0 ? {} : _h, _j = _b.defaultDelay, defaultDelay = _j === void 0 ? 0 : _j, responseProxyFn = _b.responseProxyFn, _k = _b.ignoredMocks, ignoredMocks = _k === void 0 ? [] : _k;
    // this needs to be placed before creating the XHR mocks
    setupXHRMock();
    // convert ignored mocks RegExps to the strings
    /** @type {?} */
    var ignoredMocksStrings = Array.isArray(ignoredMocks) && ignoredMocks.length
        ? ignoredMocks.map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return value.toString(); }))
        : [];
    // pick the right scenario mocks and create mock for every mock definition
    getScenarioMocks(mockScenarios, mockScenario)
        .filter((/**
     * @param {?} mock
     * @return {?}
     */
    function (mock) { return !ignoredMocksStrings.includes(mock.url.toString()); }))
        .forEach((/**
     * @param {?} mock
     * @return {?}
     */
    function (mock) {
        // use default values in the first place
        /** @type {?} */
        var updatedMock = __assign({ responseCode: defaultResponseCode, responseHeaders: defaultResponseHeaders, delay: defaultDelay }, mock);
        // create mocks for both XHR an Fetch API
        createXHRMock(updatedMock, loggingEnabled, responseProxyFn);
        createFetchMock(updatedMock, loggingEnabled, responseProxyFn);
    }));
    // turn `fallbackToNetwork` on/off
    fallbackToNetworkXHR(fallbackToNetwork);
    fallbackToNetworkFetch(fallbackToNetwork);
    // turn `overwriteRoutesFetch` on/off (Fetch API only)
    overwriteRoutesFetch(true);
});
/**
 * Gets the corresponding value for `mockScenario` key in the browser's Location object.
 * \@param location The location object (accesible via `window.location`)
 * \@param useLocationHash Whether during a search for search params in URL accept hashtag or not.
 * @type {?}
 */
export var extractMockScenarioFromLocation = (/**
 * @param {?} location
 * @param {?} useLocationHash
 * @return {?}
 */
function (location, useLocationHash) {
    /** @type {?} */
    var locationSearch = useLocationHash
        ? // remove leading symbols like: `#`, `#/`, `/`
            location.hash.replace(/^(#\/|#|\/)+/g, '')
        : location.search;
    var _a = parseQueryParams(locationSearch).mockScenario, mockScenario = _a === void 0 ? 'default' : _a;
    if (Array.isArray(mockScenario)) {
        throw new Error('Error during processing the mock scenario');
    }
    return mockScenario;
});
/**
 * Picks the mocks from the current mock scenario.
 * \@param mockScenarios Map of the mock scenarios.
 * \@param mockScenario Key of the current mock scenario.
 * @type {?}
 */
var getScenarioMocks = (/**
 * @param {?} mockScenarios
 * @param {?} mockScenario
 * @return {?}
 */
function (mockScenarios, mockScenario) {
    /** @type {?} */
    var defaultMocks = mockScenarios.default;
    if (mockScenario === 'default') {
        return defaultMocks;
    }
    /** @type {?} */
    var selectedMocks = mockScenarios[mockScenario];
    if (!selectedMocks) {
        throw new Error("No mocks found for mock scenario: '" + mockScenario + "'");
    }
    return __spread(selectedMocks, defaultMocks.filter((/**
     * @param {?} defaultMock
     * @return {?}
     */
    function (defaultMock) {
        return selectedMocks.findIndex((/**
         * @param {?} mock
         * @return {?}
         */
        function (mock) {
            return mock.method === defaultMock.method &&
                mock.url.toString() === defaultMock.url.toString();
        })) === -1;
    })));
});
var ɵ0 = getScenarioMocks;
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0LWh0dHAtbW9ja3MuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9odHRwLW1vY2tzLyIsInNvdXJjZXMiOlsibGliL2luamVjdC1odHRwLW1vY2tzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFDTCxzQkFBc0IsRUFDdEIsb0JBQW9CLEVBQ3BCLGVBQWUsRUFDZixnQkFBZ0IsRUFDaEIsWUFBWSxFQUNaLG9CQUFvQixFQUNwQixhQUFhLEVBQ2QsTUFBTSxTQUFTLENBQUM7Ozs7O0FBT2pCLE1BQU0sS0FBTyxlQUFlOzs7OztBQUFHLFVBQzdCLGFBQTRCLEVBQzVCLEVBYW1CO1FBYm5CLDRCQWFtQixFQVpqQix5QkFBd0IsRUFBeEIsNkNBQXdCLEVBQ3hCLHNCQUFzQixFQUF0QiwyQ0FBc0IsRUFDdEIsdUJBQXVCLEVBQXZCLDRDQUF1QixFQUN2QixvQkFHQyxFQUhELHFHQUdDLEVBQ0QsMkJBQXlCLEVBQXpCLDhDQUF5QixFQUN6Qiw4QkFBMkIsRUFBM0IsZ0RBQTJCLEVBQzNCLG9CQUFnQixFQUFoQixxQ0FBZ0IsRUFDaEIsb0NBQWUsRUFDZixvQkFBaUIsRUFBakIsc0NBQWlCO0lBR25CLHdEQUF3RDtJQUN4RCxZQUFZLEVBQUUsQ0FBQzs7O1FBR1QsbUJBQW1CLEdBQ3ZCLEtBQUssQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksWUFBWSxDQUFDLE1BQU07UUFDaEQsQ0FBQyxDQUFDLFlBQVksQ0FBQyxHQUFHOzs7O1FBQUMsVUFBQyxLQUFhLElBQUssT0FBQSxLQUFLLENBQUMsUUFBUSxFQUFFLEVBQWhCLENBQWdCLEVBQUM7UUFDdkQsQ0FBQyxDQUFDLEVBQUU7SUFFUiwwRUFBMEU7SUFDMUUsZ0JBQWdCLENBQUMsYUFBYSxFQUFFLFlBQVksQ0FBQztTQUMxQyxNQUFNOzs7O0lBQUMsVUFBQyxJQUFVLElBQUssT0FBQSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQWxELENBQWtELEVBQUM7U0FDMUUsT0FBTzs7OztJQUFDLFVBQUMsSUFBVTs7O1lBRVosV0FBVyxjQUNmLFlBQVksRUFBRSxtQkFBbUIsRUFDakMsZUFBZSxFQUFFLHNCQUFzQixFQUN2QyxLQUFLLEVBQUUsWUFBWSxJQUNoQixJQUFJLENBQ1I7UUFFRCx5Q0FBeUM7UUFDekMsYUFBYSxDQUFDLFdBQVcsRUFBRSxjQUFjLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDNUQsZUFBZSxDQUFDLFdBQVcsRUFBRSxjQUFjLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDaEUsQ0FBQyxFQUFDLENBQUM7SUFFTCxrQ0FBa0M7SUFDbEMsb0JBQW9CLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUN4QyxzQkFBc0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBRTFDLHNEQUFzRDtJQUN0RCxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM3QixDQUFDLENBQUE7Ozs7Ozs7QUFPRCxNQUFNLEtBQU8sK0JBQStCOzs7OztBQUFHLFVBQzdDLFFBQWtCLEVBQ2xCLGVBQXdCOztRQUVsQixjQUFjLEdBQUcsZUFBZTtRQUNwQyxDQUFDLENBQUMsOENBQThDO1lBQzlDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQUM7UUFDNUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNO0lBRVgsSUFBQSxrREFBd0IsRUFBeEIsNkNBQXdCO0lBRWhDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsRUFBRTtRQUMvQixNQUFNLElBQUksS0FBSyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7S0FDOUQ7SUFFRCxPQUFPLFlBQVksQ0FBQztBQUN0QixDQUFDLENBQUE7Ozs7Ozs7SUFPSyxnQkFBZ0I7Ozs7O0FBQUcsVUFDdkIsYUFBNEIsRUFDNUIsWUFBaUM7O1FBRTNCLFlBQVksR0FBRyxhQUFhLENBQUMsT0FBTztJQUUxQyxJQUFJLFlBQVksS0FBSyxTQUFTLEVBQUU7UUFDOUIsT0FBTyxZQUFZLENBQUM7S0FDckI7O1FBRUssYUFBYSxHQUFHLGFBQWEsQ0FBQyxZQUFZLENBQUM7SUFFakQsSUFBSSxDQUFDLGFBQWEsRUFBRTtRQUNsQixNQUFNLElBQUksS0FBSyxDQUFDLHdDQUFzQyxZQUFZLE1BQUcsQ0FBQyxDQUFDO0tBQ3hFO0lBRUQsZ0JBQ0ssYUFBYSxFQUNiLFlBQVksQ0FBQyxNQUFNOzs7O0lBQ3BCLFVBQUMsV0FBaUI7UUFDaEIsT0FBQSxhQUFhLENBQUMsU0FBUzs7OztRQUNyQixVQUFDLElBQVU7WUFDVCxPQUFBLElBQUksQ0FBQyxNQUFNLEtBQUssV0FBVyxDQUFDLE1BQU07Z0JBQ2xDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEtBQUssV0FBVyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUU7UUFEbEQsQ0FDa0QsRUFDckQsS0FBSyxDQUFDLENBQUM7SUFKUixDQUlRLEVBQ1gsRUFDRDtBQUNKLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGZhbGxiYWNrVG9OZXR3b3JrRmV0Y2gsXG4gIG92ZXJ3cml0ZVJvdXRlc0ZldGNoLFxuICBjcmVhdGVGZXRjaE1vY2ssXG4gIHBhcnNlUXVlcnlQYXJhbXMsXG4gIHNldHVwWEhSTW9jayxcbiAgZmFsbGJhY2tUb05ldHdvcmtYSFIsXG4gIGNyZWF0ZVhIUk1vY2tcbn0gZnJvbSAnLi91dGlscyc7XG5cbmltcG9ydCB7IE1vY2tTY2VuYXJpb3MsIE1vY2tPcHRpb25zLCBNb2NrIH0gZnJvbSAnLi9odHRwLW1vY2tzLm1vZGVsJztcblxuLyoqXG4gKiBNYWluIGBodHRwLW1vY2tzYCBtZXRob2QgdGhhdCBoYW5kbGVzIGVudGlyZSBjcmVhdGlvbiBvZiBtb2NrcyBmb3IgWEhSIGFuZCBGZXRjaCBBUEkuXG4gKi9cbmV4cG9ydCBjb25zdCBpbmplY3RIdHRwTW9ja3MgPSAoXG4gIG1vY2tTY2VuYXJpb3M6IE1vY2tTY2VuYXJpb3MsXG4gIHtcbiAgICBmYWxsYmFja1RvTmV0d29yayA9IHRydWUsXG4gICAgbG9nZ2luZ0VuYWJsZWQgPSBmYWxzZSxcbiAgICB1c2VMb2NhdGlvbkhhc2ggPSBmYWxzZSxcbiAgICBtb2NrU2NlbmFyaW8gPSBleHRyYWN0TW9ja1NjZW5hcmlvRnJvbUxvY2F0aW9uKFxuICAgICAgd2luZG93LmxvY2F0aW9uLFxuICAgICAgdXNlTG9jYXRpb25IYXNoXG4gICAgKSxcbiAgICBkZWZhdWx0UmVzcG9uc2VDb2RlID0gMjAwLFxuICAgIGRlZmF1bHRSZXNwb25zZUhlYWRlcnMgPSB7fSxcbiAgICBkZWZhdWx0RGVsYXkgPSAwLFxuICAgIHJlc3BvbnNlUHJveHlGbixcbiAgICBpZ25vcmVkTW9ja3MgPSBbXVxuICB9OiBNb2NrT3B0aW9ucyA9IHt9XG4pOiB2b2lkID0+IHtcbiAgLy8gdGhpcyBuZWVkcyB0byBiZSBwbGFjZWQgYmVmb3JlIGNyZWF0aW5nIHRoZSBYSFIgbW9ja3NcbiAgc2V0dXBYSFJNb2NrKCk7XG5cbiAgLy8gY29udmVydCBpZ25vcmVkIG1vY2tzIFJlZ0V4cHMgdG8gdGhlIHN0cmluZ3NcbiAgY29uc3QgaWdub3JlZE1vY2tzU3RyaW5nczogc3RyaW5nW10gPVxuICAgIEFycmF5LmlzQXJyYXkoaWdub3JlZE1vY2tzKSAmJiBpZ25vcmVkTW9ja3MubGVuZ3RoXG4gICAgICA/IGlnbm9yZWRNb2Nrcy5tYXAoKHZhbHVlOiBSZWdFeHApID0+IHZhbHVlLnRvU3RyaW5nKCkpXG4gICAgICA6IFtdO1xuXG4gIC8vIHBpY2sgdGhlIHJpZ2h0IHNjZW5hcmlvIG1vY2tzIGFuZCBjcmVhdGUgbW9jayBmb3IgZXZlcnkgbW9jayBkZWZpbml0aW9uXG4gIGdldFNjZW5hcmlvTW9ja3MobW9ja1NjZW5hcmlvcywgbW9ja1NjZW5hcmlvKVxuICAgIC5maWx0ZXIoKG1vY2s6IE1vY2spID0+ICFpZ25vcmVkTW9ja3NTdHJpbmdzLmluY2x1ZGVzKG1vY2sudXJsLnRvU3RyaW5nKCkpKVxuICAgIC5mb3JFYWNoKChtb2NrOiBNb2NrKSA9PiB7XG4gICAgICAvLyB1c2UgZGVmYXVsdCB2YWx1ZXMgaW4gdGhlIGZpcnN0IHBsYWNlXG4gICAgICBjb25zdCB1cGRhdGVkTW9jazogTW9jayA9IHtcbiAgICAgICAgcmVzcG9uc2VDb2RlOiBkZWZhdWx0UmVzcG9uc2VDb2RlLFxuICAgICAgICByZXNwb25zZUhlYWRlcnM6IGRlZmF1bHRSZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGRlbGF5OiBkZWZhdWx0RGVsYXksXG4gICAgICAgIC4uLm1vY2tcbiAgICAgIH07XG5cbiAgICAgIC8vIGNyZWF0ZSBtb2NrcyBmb3IgYm90aCBYSFIgYW4gRmV0Y2ggQVBJXG4gICAgICBjcmVhdGVYSFJNb2NrKHVwZGF0ZWRNb2NrLCBsb2dnaW5nRW5hYmxlZCwgcmVzcG9uc2VQcm94eUZuKTtcbiAgICAgIGNyZWF0ZUZldGNoTW9jayh1cGRhdGVkTW9jaywgbG9nZ2luZ0VuYWJsZWQsIHJlc3BvbnNlUHJveHlGbik7XG4gICAgfSk7XG5cbiAgLy8gdHVybiBgZmFsbGJhY2tUb05ldHdvcmtgIG9uL29mZlxuICBmYWxsYmFja1RvTmV0d29ya1hIUihmYWxsYmFja1RvTmV0d29yayk7XG4gIGZhbGxiYWNrVG9OZXR3b3JrRmV0Y2goZmFsbGJhY2tUb05ldHdvcmspO1xuXG4gIC8vIHR1cm4gYG92ZXJ3cml0ZVJvdXRlc0ZldGNoYCBvbi9vZmYgKEZldGNoIEFQSSBvbmx5KVxuICBvdmVyd3JpdGVSb3V0ZXNGZXRjaCh0cnVlKTtcbn07XG5cbi8qKlxuICogR2V0cyB0aGUgY29ycmVzcG9uZGluZyB2YWx1ZSBmb3IgYG1vY2tTY2VuYXJpb2Aga2V5IGluIHRoZSBicm93c2VyJ3MgTG9jYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIGxvY2F0aW9uIFRoZSBsb2NhdGlvbiBvYmplY3QgKGFjY2VzaWJsZSB2aWEgYHdpbmRvdy5sb2NhdGlvbmApXG4gKiBAcGFyYW0gdXNlTG9jYXRpb25IYXNoIFdoZXRoZXIgZHVyaW5nIGEgc2VhcmNoIGZvciBzZWFyY2ggcGFyYW1zIGluIFVSTCBhY2NlcHQgaGFzaHRhZyBvciBub3QuXG4gKi9cbmV4cG9ydCBjb25zdCBleHRyYWN0TW9ja1NjZW5hcmlvRnJvbUxvY2F0aW9uID0gKFxuICBsb2NhdGlvbjogTG9jYXRpb24sXG4gIHVzZUxvY2F0aW9uSGFzaDogYm9vbGVhblxuKTogc3RyaW5nID0+IHtcbiAgY29uc3QgbG9jYXRpb25TZWFyY2ggPSB1c2VMb2NhdGlvbkhhc2hcbiAgICA/IC8vIHJlbW92ZSBsZWFkaW5nIHN5bWJvbHMgbGlrZTogYCNgLCBgIy9gLCBgL2BcbiAgICAgIGxvY2F0aW9uLmhhc2gucmVwbGFjZSgvXigjXFwvfCN8XFwvKSsvZywgJycpXG4gICAgOiBsb2NhdGlvbi5zZWFyY2g7XG5cbiAgY29uc3QgeyBtb2NrU2NlbmFyaW8gPSAnZGVmYXVsdCcgfSA9IHBhcnNlUXVlcnlQYXJhbXMobG9jYXRpb25TZWFyY2gpO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KG1vY2tTY2VuYXJpbykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIGR1cmluZyBwcm9jZXNzaW5nIHRoZSBtb2NrIHNjZW5hcmlvJyk7XG4gIH1cblxuICByZXR1cm4gbW9ja1NjZW5hcmlvO1xufTtcblxuLyoqXG4gKiBQaWNrcyB0aGUgbW9ja3MgZnJvbSB0aGUgY3VycmVudCBtb2NrIHNjZW5hcmlvLlxuICogQHBhcmFtIG1vY2tTY2VuYXJpb3MgTWFwIG9mIHRoZSBtb2NrIHNjZW5hcmlvcy5cbiAqIEBwYXJhbSBtb2NrU2NlbmFyaW8gS2V5IG9mIHRoZSBjdXJyZW50IG1vY2sgc2NlbmFyaW8uXG4gKi9cbmNvbnN0IGdldFNjZW5hcmlvTW9ja3MgPSAoXG4gIG1vY2tTY2VuYXJpb3M6IE1vY2tTY2VuYXJpb3MsXG4gIG1vY2tTY2VuYXJpbzoga2V5b2YgTW9ja1NjZW5hcmlvc1xuKTogTW9ja1tdID0+IHtcbiAgY29uc3QgZGVmYXVsdE1vY2tzID0gbW9ja1NjZW5hcmlvcy5kZWZhdWx0O1xuXG4gIGlmIChtb2NrU2NlbmFyaW8gPT09ICdkZWZhdWx0Jykge1xuICAgIHJldHVybiBkZWZhdWx0TW9ja3M7XG4gIH1cblxuICBjb25zdCBzZWxlY3RlZE1vY2tzID0gbW9ja1NjZW5hcmlvc1ttb2NrU2NlbmFyaW9dO1xuXG4gIGlmICghc2VsZWN0ZWRNb2Nrcykge1xuICAgIHRocm93IG5ldyBFcnJvcihgTm8gbW9ja3MgZm91bmQgZm9yIG1vY2sgc2NlbmFyaW86ICcke21vY2tTY2VuYXJpb30nYCk7XG4gIH1cblxuICByZXR1cm4gW1xuICAgIC4uLnNlbGVjdGVkTW9ja3MsXG4gICAgLi4uZGVmYXVsdE1vY2tzLmZpbHRlcihcbiAgICAgIChkZWZhdWx0TW9jazogTW9jaykgPT5cbiAgICAgICAgc2VsZWN0ZWRNb2Nrcy5maW5kSW5kZXgoXG4gICAgICAgICAgKG1vY2s6IE1vY2spID0+XG4gICAgICAgICAgICBtb2NrLm1ldGhvZCA9PT0gZGVmYXVsdE1vY2subWV0aG9kICYmXG4gICAgICAgICAgICBtb2NrLnVybC50b1N0cmluZygpID09PSBkZWZhdWx0TW9jay51cmwudG9TdHJpbmcoKVxuICAgICAgICApID09PSAtMVxuICAgIClcbiAgXTtcbn07XG4iXX0=