{"version":3,"file":"http-mocks.js","sources":["ng://http-mocks/lib/http-mocks.model.ts","ng://http-mocks/lib/utils/query.ts","ng://http-mocks/lib/utils/log.ts","ng://http-mocks/lib/utils/proxy.ts","ng://http-mocks/lib/utils/fetch.ts","ng://http-mocks/lib/utils/delay.ts","ng://http-mocks/lib/utils/xhr.ts","ng://http-mocks/lib/inject-http-mocks.ts","ng://http-mocks/lib/http-mocks.service.ts"],"sourcesContent":["export type HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE';\n\nexport type RequestQuery = Record<string, any>;\nexport type RequestBody = Record<string, any> | null;\n\nexport type ResponseHeaders = Record<string, any>;\n\nexport interface MockRequest {\n  requestQuery: ResponseHeaders;\n  requestBody: any;\n  requestHeaders: ResponseHeaders;\n}\n\nexport interface MockResponse {\n  responseBody: any;\n  responseCode: number;\n  responseHeaders: ResponseHeaders;\n}\n\nexport type MockParams = Pick<\n  Mock,\n  'url' | 'method' | 'responseCode' | 'responseHeaders'\n>;\n\nexport interface Mock {\n  /**\n   * A regular expression that should match with the URL of the HTTP request.\n   */\n  url: RegExp;\n\n  /**\n   * HTTP method.\n   */\n  method: HttpMethod;\n\n  /**\n   * A function that contains a logic that returns response data accordingly to the request (query params and payload).\n   */\n  responseFn: (\n    requestQuery: RequestQuery,\n    requestBody: RequestBody\n  ) => MockResponse['responseBody'];\n\n  /**\n   * Status code of the HTTP transaction. (default: `200`)\n   */\n  responseCode?: number;\n\n  /**\n   * Headers of the response. (default: `{}`)\n   */\n  responseHeaders?: ResponseHeaders;\n\n  /**\n   * Time of the response delay (in milliseconds). (default: `0`)\n   */\n  delay?: number;\n}\n\nexport interface MockScenarios {\n  default: Mock[];\n  [mockScenario: string]: Mock[];\n}\n\nexport interface MockOptions {\n  /**\n   * Whether pass through the request to the network if no mock exists. (default: `true`)\n   */\n  fallbackToNetwork?: boolean;\n\n  /**\n   * Whether log information about request/response of the mock to the console. (default: `false`)\n   */\n  loggingEnabled?: boolean;\n\n  /**\n   * Whether accept search string placed after the hashtag in URL,\n   * e.g. `http://localhost:4200/#/?mockScenario=scenarioKey`. (default: `false`)\n   */\n  useLocationHash?: boolean;\n\n  /**\n   * The scenario key to use for mocking. (default: `'default'`)\n   */\n  mockScenario?: keyof MockScenarios;\n\n  /**\n   * Common response code for all mocks that can be overridden by the response code of the particular mock. (default: `200`)\n   */\n  defaultResponseCode?: number;\n\n  /**\n   * Common response headers for all mocks that can be overridden by the response headers of the particular mock. (default: `{}`)\n   */\n  defaultResponseHeaders?: ResponseHeaders;\n\n  /**\n   * Common mock delay for all mocks that can be overridden by the mock delay of the particular mock. (default: `0`)\n   */\n  defaultDelay?: number;\n\n  /**\n   * Wrapper function that applies to all mock responses.\n   * Useful when you change the overall data response structure without an impact on the data.\n   */\n  responseProxyFn?: (\n    responseBody: any, // The result of the `responseFn: (requestQuery: RequestQuery, requestBody: RequestBody) => any`\n    mockParams: MockParams,\n    mockRequest: MockRequest\n  ) => MockResponse;\n\n  /**\n   * Disables specific mocks.\n   * With this option, you can easily disable particular mocks when you're about to connect to the real API.\n   */\n  ignoredMocks?: RegExp[];\n}\n","/**\n * Extracts query string params and return them as an object.\n * @param locationSearch Query string to process.\n */\nexport const parseQueryParams = (\n  locationSearch: string = ''\n): Record<string, string> => {\n  const urlSearchParams = new URLSearchParams(locationSearch);\n\n  const queryParams = {};\n\n  urlSearchParams.forEach((value: string, key: string) => {\n    queryParams[key] = value;\n  });\n\n  return queryParams;\n};\n","import { Mock, MockRequest, MockResponse } from './../http-mocks.model';\n\n/**\n * Creates a collapsed group console log of the mock's request and response.\n */\nexport const logMock = (\n  { method, url, delay }: Mock,\n  { requestQuery, requestBody, requestHeaders }: MockRequest,\n  { responseBody, responseCode, responseHeaders }: MockResponse\n): void => {\n  console.groupCollapsed(`${method} ${url}`);\n\n  console.log('Status:', responseCode);\n  console.log('Delay:', delay);\n\n  console.group('Request');\n  console.log('Headers:', requestHeaders);\n  console.log('Query:', requestQuery);\n  console.log('Body:', requestBody);\n  console.groupEnd();\n\n  console.group('Response');\n  console.log('Headers:', responseHeaders);\n  console.log('Body:', responseBody);\n  console.groupEnd();\n\n  console.groupEnd();\n};\n","import {\n  Mock,\n  MockOptions,\n  MockResponse,\n  MockRequest\n} from './../http-mocks.model';\n\nexport const handleProxyFn = (\n  responseBody: any,\n  mock: Mock,\n  mockRequest: MockRequest,\n  proxyFn?: MockOptions['responseProxyFn']\n): MockResponse => {\n  return proxyFn && typeof proxyFn === 'function'\n    ? proxyFn(\n        responseBody,\n        {\n          url: mock.url,\n          method: mock.method,\n          responseCode: mock.responseCode,\n          responseHeaders: mock.responseHeaders\n        },\n        mockRequest\n      )\n    : {\n        responseBody,\n        responseCode: mock.responseCode,\n        responseHeaders: mock.responseHeaders\n      };\n};\n","import {\n  MockOptions as FetchMockOptions,\n  MockResponse as FetchMockResponse\n} from 'fetch-mock';\n\nimport fetchMock from 'fetch-mock/es5/client';\n\nimport { parseQueryParams } from './query';\n\nimport { logMock } from './log';\n\nimport { handleProxyFn } from './proxy';\n\nimport { Mock, MockOptions, MockResponse } from './../http-mocks.model';\n\nexport const fallbackToNetworkFetch = (fallbackToNetwork: boolean) => {\n  fetchMock.config.fallbackToNetwork = fallbackToNetwork;\n};\n\nexport const overwriteRoutesFetch = (overwriteRoutes: boolean) => {\n  fetchMock.config.overwriteRoutes = overwriteRoutes;\n};\n\nexport const createFetchMock = (\n  mock: Mock,\n  loggingEnabled: boolean,\n  responseProxyFn: MockOptions['responseProxyFn']\n): void => {\n  fetchMock.mock(\n    mock.url,\n    (url: RegExp, fetchMockOptions: FetchMockOptions) => {\n      const body = fetchMockOptions?.body || {};\n      const headers = fetchMockOptions?.headers || {};\n      const createdURL = createURL(url);\n\n      // request\n      const requestQuery = parseQueryParams(\n        createdURL !== null\n          ? createdURL.search\n          : removeAllBeforeChar(url.toString(), '?')\n      );\n      const requestBody = typeof body === 'string' ? JSON.parse(body) : body;\n      const requestHeaders = headers;\n\n      // response\n      const responseBody = mock.responseFn(requestQuery, requestBody);\n      const responseData: MockResponse = handleProxyFn(\n        responseBody,\n        mock,\n        {\n          requestQuery,\n          requestBody,\n          requestHeaders\n        },\n        responseProxyFn\n      );\n\n      const response: FetchMockResponse = {\n        headers: responseData.responseHeaders,\n        status: responseData.responseCode,\n        body: responseData.responseBody\n      };\n\n      if (loggingEnabled) {\n        logMock(\n          mock,\n          {\n            requestQuery,\n            requestBody,\n            requestHeaders\n          },\n          responseData\n        );\n      }\n\n      return response;\n    },\n    {\n      delay: mock.delay\n    }\n  );\n};\n\n/**\n * Tries to create a new instace of URL()\n */\nconst createURL = (url: RegExp | string): URL | null => {\n  try {\n    return new URL(`${url}`);\n  } catch (_) {\n    return null;\n  }\n};\n\n/**\n * Removes all chars before specific char (char includes).\n * If char doesn't exist, returns an empty string.\n */\nconst removeAllBeforeChar = (value: string, char: string): string => {\n  if (!value.includes(char)) {\n    return '';\n  }\n\n  return `${value}`.split(char).pop();\n};\n","// SOURCE: https://github.com/sindresorhus/delay\n\ninterface AbortSignal {\n  readonly aborted: boolean;\n  addEventListener(\n    type: 'abort',\n    listener: () => void,\n    options?: { once?: boolean }\n  ): void;\n  removeEventListener(type: 'abort', listener: () => void): void;\n}\n\ninterface Options {\n  signal?: AbortSignal;\n}\n\ninterface ClearablePromise<T> extends Promise<T> {\n  clear(): void;\n}\n\ninterface Delay {\n  (milliseconds: number, options?: Options): ClearablePromise<void>;\n\n  <T>(\n    milliseconds: number,\n    options?: Options & {\n      value: T;\n    }\n  ): ClearablePromise<T>;\n\n  reject?: (\n    milliseconds: number,\n    options?: Options & {\n      value?: unknown;\n    }\n  ) => ClearablePromise<never>;\n\n  createWithTimers?: (timers: {\n    clearTimeout: typeof clearTimeout;\n    setTimeout: typeof setTimeout;\n  }) => Delay;\n}\n\nconst createAbortError = () => {\n  const error = new Error('Delay aborted');\n  error.name = 'AbortError';\n  return error;\n};\n\nexport const createDelay = ({\n  clearTimeout: defaultClear,\n  setTimeout: set,\n  willResolve\n}: any) => (ms: number, { value, signal } = {} as any) => {\n  if (signal && signal.aborted) {\n    return Promise.reject(createAbortError());\n  }\n\n  let timeoutId;\n  let settle;\n  let rejectFn;\n  const clear = defaultClear || clearTimeout;\n\n  const signalListener = () => {\n    clear(timeoutId);\n    rejectFn(createAbortError());\n  };\n\n  const cleanup = () => {\n    if (signal) {\n      signal.removeEventListener('abort', signalListener);\n    }\n  };\n\n  const delayPromise: any = new Promise((resolve, reject) => {\n    settle = () => {\n      cleanup();\n      if (willResolve) {\n        resolve(value);\n      } else {\n        reject(value);\n      }\n    };\n\n    rejectFn = reject;\n    timeoutId = (set || setTimeout)(settle, ms);\n  });\n\n  if (signal) {\n    signal.addEventListener('abort', signalListener, { once: true });\n  }\n\n  delayPromise.clear = () => {\n    clear(timeoutId);\n    timeoutId = null;\n    settle();\n  };\n\n  return delayPromise;\n};\n\nexport const delay: Delay = createDelay({ willResolve: true });\n\ndelay.reject = createDelay({ willResolve: false });\ndelay.createWithTimers = ({ clearTimeout, setTimeout }) => {\n  const innerDelay: Delay = createDelay({\n    clearTimeout,\n    setTimeout,\n    willResolve: true\n  });\n  innerDelay.reject = createDelay({\n    clearTimeout,\n    setTimeout,\n    willResolve: false\n  });\n  return innerDelay;\n};\n","import xhrMock, {\n  MockRequest as XhrMockRequest,\n  MockResponse as XhrMockResponse,\n  proxy\n} from 'xhr-mock';\n\nimport { delay } from './delay';\n\nimport { logMock } from './log';\n\nimport { handleProxyFn } from './proxy';\n\nimport { Mock, MockOptions, MockResponse } from './../http-mocks.model';\n\nexport const setupXHRMock = (): void => {\n  xhrMock.setup();\n};\n\nexport const fallbackToNetworkXHR = (fallbackToNetwork: boolean) => {\n  if (fallbackToNetwork) {\n    xhrMock.use(proxy);\n  }\n};\n\nexport const createXHRMock = (\n  mock: Mock,\n  loggingEnabled: boolean,\n  responseProxyFn?: MockOptions['responseProxyFn']\n): void => {\n  xhrMock.use(\n    mock.method,\n    mock.url,\n    async (mockRequest: XhrMockRequest, mockResponse: XhrMockResponse) => {\n      // request\n      const requestQuery = mockRequest.url().query || {};\n      const requestBody =\n        mockRequest.body() != null ? JSON.parse(mockRequest.body()) : {};\n      const requestHeaders = mockRequest.headers();\n\n      // response\n      const responseBody = mock.responseFn(requestQuery, requestBody);\n      const responseData: MockResponse = handleProxyFn(\n        responseBody,\n        mock,\n        {\n          requestQuery,\n          requestBody,\n          requestHeaders\n        },\n        responseProxyFn\n      );\n\n      const response = mockResponse\n        .status(responseData.responseCode)\n        .body(responseData.responseBody)\n        .headers(responseData.responseHeaders);\n\n      await delay(mock.delay);\n\n      if (loggingEnabled) {\n        logMock(\n          mock,\n          {\n            requestQuery,\n            requestBody,\n            requestHeaders\n          },\n          responseData\n        );\n      }\n\n      return response;\n    }\n  );\n};\n","import {\n  fallbackToNetworkFetch,\n  overwriteRoutesFetch,\n  createFetchMock,\n  parseQueryParams,\n  setupXHRMock,\n  fallbackToNetworkXHR,\n  createXHRMock\n} from './utils';\n\nimport { MockScenarios, MockOptions, Mock } from './http-mocks.model';\n\n/**\n * Main `http-mocks` method that handles entire creation of mocks for XHR and Fetch API.\n */\nexport const injectHttpMocks = (\n  mockScenarios: MockScenarios,\n  {\n    fallbackToNetwork = true,\n    loggingEnabled = false,\n    useLocationHash = false,\n    mockScenario = extractMockScenarioFromLocation(\n      window.location,\n      useLocationHash\n    ),\n    defaultResponseCode = 200,\n    defaultResponseHeaders = {},\n    defaultDelay = 0,\n    responseProxyFn,\n    ignoredMocks = []\n  }: MockOptions = {}\n): void => {\n  // this needs to be placed before creating the XHR mocks\n  setupXHRMock();\n\n  // convert ignored mocks RegExps to the strings\n  const ignoredMocksStrings: string[] =\n    Array.isArray(ignoredMocks) && ignoredMocks.length\n      ? ignoredMocks.map((value: RegExp) => value.toString())\n      : [];\n\n  // pick the right scenario mocks and create mock for every mock definition\n  getScenarioMocks(mockScenarios, mockScenario)\n    .filter((mock: Mock) => !ignoredMocksStrings.includes(mock.url.toString()))\n    .forEach((mock: Mock) => {\n      // use default values in the first place\n      const updatedMock: Mock = {\n        responseCode: defaultResponseCode,\n        responseHeaders: defaultResponseHeaders,\n        delay: defaultDelay,\n        ...mock\n      };\n\n      // create mocks for both XHR an Fetch API\n      createXHRMock(updatedMock, loggingEnabled, responseProxyFn);\n      createFetchMock(updatedMock, loggingEnabled, responseProxyFn);\n    });\n\n  // turn `fallbackToNetwork` on/off\n  fallbackToNetworkXHR(fallbackToNetwork);\n  fallbackToNetworkFetch(fallbackToNetwork);\n\n  // turn `overwriteRoutesFetch` on/off (Fetch API only)\n  overwriteRoutesFetch(true);\n};\n\n/**\n * Gets the corresponding value for `mockScenario` key in the browser's Location object.\n * @param location The location object (accesible via `window.location`)\n * @param useLocationHash Whether during a search for search params in URL accept hashtag or not.\n */\nexport const extractMockScenarioFromLocation = (\n  location: Location,\n  useLocationHash: boolean\n): string => {\n  const locationSearch = useLocationHash\n    ? // remove leading symbols like: `#`, `#/`, `/`\n      location.hash.replace(/^(#\\/|#|\\/)+/g, '')\n    : location.search;\n\n  const { mockScenario = 'default' } = parseQueryParams(locationSearch);\n\n  if (Array.isArray(mockScenario)) {\n    throw new Error('Error during processing the mock scenario');\n  }\n\n  return mockScenario;\n};\n\n/**\n * Picks the mocks from the current mock scenario.\n * @param mockScenarios Map of the mock scenarios.\n * @param mockScenario Key of the current mock scenario.\n */\nconst getScenarioMocks = (\n  mockScenarios: MockScenarios,\n  mockScenario: keyof MockScenarios\n): Mock[] => {\n  const defaultMocks = mockScenarios.default;\n\n  if (mockScenario === 'default') {\n    return defaultMocks;\n  }\n\n  const selectedMocks = mockScenarios[mockScenario];\n\n  if (!selectedMocks) {\n    throw new Error(`No mocks found for mock scenario: '${mockScenario}'`);\n  }\n\n  return [\n    ...selectedMocks,\n    ...defaultMocks.filter(\n      (defaultMock: Mock) =>\n        selectedMocks.findIndex(\n          (mock: Mock) =>\n            mock.method === defaultMock.method &&\n            mock.url.toString() === defaultMock.url.toString()\n        ) === -1\n    )\n  ];\n};\n","import { Injectable } from '@angular/core';\n\nimport { MockScenarios, MockOptions } from './http-mocks.model';\nimport { injectHttpMocks } from './inject-http-mocks';\n\n@Injectable({ providedIn: 'root' })\nexport class HttpMocksService {\n  setHttpMocks(mockScenarios: MockScenarios, mockOptions: MockOptions) {\n    injectHttpMocks(mockScenarios, mockOptions);\n  }\n}\n"],"names":[],"mappings":"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"}