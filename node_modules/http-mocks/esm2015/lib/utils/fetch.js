/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/fetch.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import fetchMock from 'fetch-mock/es5/client';
import { parseQueryParams } from './query';
import { logMock } from './log';
import { handleProxyFn } from './proxy';
/** @type {?} */
export const fallbackToNetworkFetch = (/**
 * @param {?} fallbackToNetwork
 * @return {?}
 */
(fallbackToNetwork) => {
    fetchMock.config.fallbackToNetwork = fallbackToNetwork;
});
/** @type {?} */
export const overwriteRoutesFetch = (/**
 * @param {?} overwriteRoutes
 * @return {?}
 */
(overwriteRoutes) => {
    fetchMock.config.overwriteRoutes = overwriteRoutes;
});
/** @type {?} */
export const createFetchMock = (/**
 * @param {?} mock
 * @param {?} loggingEnabled
 * @param {?} responseProxyFn
 * @return {?}
 */
(mock, loggingEnabled, responseProxyFn) => {
    fetchMock.mock(mock.url, (/**
     * @param {?} url
     * @param {?} fetchMockOptions
     * @return {?}
     */
    (url, fetchMockOptions) => {
        var _a, _b;
        /** @type {?} */
        const body = ((_a = fetchMockOptions) === null || _a === void 0 ? void 0 : _a.body) || {};
        /** @type {?} */
        const headers = ((_b = fetchMockOptions) === null || _b === void 0 ? void 0 : _b.headers) || {};
        /** @type {?} */
        const createdURL = createURL(url);
        // request
        /** @type {?} */
        const requestQuery = parseQueryParams(createdURL !== null
            ? createdURL.search
            : removeAllBeforeChar(url.toString(), '?'));
        /** @type {?} */
        const requestBody = typeof body === 'string' ? JSON.parse(body) : body;
        /** @type {?} */
        const requestHeaders = headers;
        // response
        /** @type {?} */
        const responseBody = mock.responseFn(requestQuery, requestBody);
        /** @type {?} */
        const responseData = handleProxyFn(responseBody, mock, {
            requestQuery,
            requestBody,
            requestHeaders
        }, responseProxyFn);
        /** @type {?} */
        const response = {
            headers: responseData.responseHeaders,
            status: responseData.responseCode,
            body: responseData.responseBody
        };
        if (loggingEnabled) {
            logMock(mock, {
                requestQuery,
                requestBody,
                requestHeaders
            }, responseData);
        }
        return response;
    }), {
        delay: mock.delay
    });
});
/**
 * Tries to create a new instace of URL()
 * @type {?}
 */
const createURL = (/**
 * @param {?} url
 * @return {?}
 */
(url) => {
    try {
        return new URL(`${url}`);
    }
    catch (_) {
        return null;
    }
});
const ɵ0 = createURL;
/**
 * Removes all chars before specific char (char includes).
 * If char doesn't exist, returns an empty string.
 * @type {?}
 */
const removeAllBeforeChar = (/**
 * @param {?} value
 * @param {?} char
 * @return {?}
 */
(value, char) => {
    if (!value.includes(char)) {
        return '';
    }
    return `${value}`.split(char).pop();
});
const ɵ1 = removeAllBeforeChar;
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmV0Y2guanMiLCJzb3VyY2VSb290Ijoibmc6Ly9odHRwLW1vY2tzLyIsInNvdXJjZXMiOlsibGliL3V0aWxzL2ZldGNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBS0EsT0FBTyxTQUFTLE1BQU0sdUJBQXVCLENBQUM7QUFFOUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRTNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFFaEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFNBQVMsQ0FBQzs7QUFJeEMsTUFBTSxPQUFPLHNCQUFzQjs7OztBQUFHLENBQUMsaUJBQTBCLEVBQUUsRUFBRTtJQUNuRSxTQUFTLENBQUMsTUFBTSxDQUFDLGlCQUFpQixHQUFHLGlCQUFpQixDQUFDO0FBQ3pELENBQUMsQ0FBQTs7QUFFRCxNQUFNLE9BQU8sb0JBQW9COzs7O0FBQUcsQ0FBQyxlQUF3QixFQUFFLEVBQUU7SUFDL0QsU0FBUyxDQUFDLE1BQU0sQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDO0FBQ3JELENBQUMsQ0FBQTs7QUFFRCxNQUFNLE9BQU8sZUFBZTs7Ozs7O0FBQUcsQ0FDN0IsSUFBVSxFQUNWLGNBQXVCLEVBQ3ZCLGVBQStDLEVBQ3pDLEVBQUU7SUFDUixTQUFTLENBQUMsSUFBSSxDQUNaLElBQUksQ0FBQyxHQUFHOzs7OztJQUNSLENBQUMsR0FBVyxFQUFFLGdCQUFrQyxFQUFFLEVBQUU7OztjQUM1QyxJQUFJLEdBQUcsT0FBQSxnQkFBZ0IsMENBQUUsSUFBSSxLQUFJLEVBQUU7O2NBQ25DLE9BQU8sR0FBRyxPQUFBLGdCQUFnQiwwQ0FBRSxPQUFPLEtBQUksRUFBRTs7Y0FDekMsVUFBVSxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUM7OztjQUczQixZQUFZLEdBQUcsZ0JBQWdCLENBQ25DLFVBQVUsS0FBSyxJQUFJO1lBQ2pCLENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTTtZQUNuQixDQUFDLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUM3Qzs7Y0FDSyxXQUFXLEdBQUcsT0FBTyxJQUFJLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJOztjQUNoRSxjQUFjLEdBQUcsT0FBTzs7O2NBR3hCLFlBQVksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxXQUFXLENBQUM7O2NBQ3pELFlBQVksR0FBaUIsYUFBYSxDQUM5QyxZQUFZLEVBQ1osSUFBSSxFQUNKO1lBQ0UsWUFBWTtZQUNaLFdBQVc7WUFDWCxjQUFjO1NBQ2YsRUFDRCxlQUFlLENBQ2hCOztjQUVLLFFBQVEsR0FBc0I7WUFDbEMsT0FBTyxFQUFFLFlBQVksQ0FBQyxlQUFlO1lBQ3JDLE1BQU0sRUFBRSxZQUFZLENBQUMsWUFBWTtZQUNqQyxJQUFJLEVBQUUsWUFBWSxDQUFDLFlBQVk7U0FDaEM7UUFFRCxJQUFJLGNBQWMsRUFBRTtZQUNsQixPQUFPLENBQ0wsSUFBSSxFQUNKO2dCQUNFLFlBQVk7Z0JBQ1osV0FBVztnQkFDWCxjQUFjO2FBQ2YsRUFDRCxZQUFZLENBQ2IsQ0FBQztTQUNIO1FBRUQsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQyxHQUNEO1FBQ0UsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO0tBQ2xCLENBQ0YsQ0FBQztBQUNKLENBQUMsQ0FBQTs7Ozs7TUFLSyxTQUFTOzs7O0FBQUcsQ0FBQyxHQUFvQixFQUFjLEVBQUU7SUFDckQsSUFBSTtRQUNGLE9BQU8sSUFBSSxHQUFHLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0tBQzFCO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixPQUFPLElBQUksQ0FBQztLQUNiO0FBQ0gsQ0FBQyxDQUFBOzs7Ozs7O01BTUssbUJBQW1COzs7OztBQUFHLENBQUMsS0FBYSxFQUFFLElBQVksRUFBVSxFQUFFO0lBQ2xFLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ3pCLE9BQU8sRUFBRSxDQUFDO0tBQ1g7SUFFRCxPQUFPLEdBQUcsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ3RDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIE1vY2tPcHRpb25zIGFzIEZldGNoTW9ja09wdGlvbnMsXG4gIE1vY2tSZXNwb25zZSBhcyBGZXRjaE1vY2tSZXNwb25zZVxufSBmcm9tICdmZXRjaC1tb2NrJztcblxuaW1wb3J0IGZldGNoTW9jayBmcm9tICdmZXRjaC1tb2NrL2VzNS9jbGllbnQnO1xuXG5pbXBvcnQgeyBwYXJzZVF1ZXJ5UGFyYW1zIH0gZnJvbSAnLi9xdWVyeSc7XG5cbmltcG9ydCB7IGxvZ01vY2sgfSBmcm9tICcuL2xvZyc7XG5cbmltcG9ydCB7IGhhbmRsZVByb3h5Rm4gfSBmcm9tICcuL3Byb3h5JztcblxuaW1wb3J0IHsgTW9jaywgTW9ja09wdGlvbnMsIE1vY2tSZXNwb25zZSB9IGZyb20gJy4vLi4vaHR0cC1tb2Nrcy5tb2RlbCc7XG5cbmV4cG9ydCBjb25zdCBmYWxsYmFja1RvTmV0d29ya0ZldGNoID0gKGZhbGxiYWNrVG9OZXR3b3JrOiBib29sZWFuKSA9PiB7XG4gIGZldGNoTW9jay5jb25maWcuZmFsbGJhY2tUb05ldHdvcmsgPSBmYWxsYmFja1RvTmV0d29yaztcbn07XG5cbmV4cG9ydCBjb25zdCBvdmVyd3JpdGVSb3V0ZXNGZXRjaCA9IChvdmVyd3JpdGVSb3V0ZXM6IGJvb2xlYW4pID0+IHtcbiAgZmV0Y2hNb2NrLmNvbmZpZy5vdmVyd3JpdGVSb3V0ZXMgPSBvdmVyd3JpdGVSb3V0ZXM7XG59O1xuXG5leHBvcnQgY29uc3QgY3JlYXRlRmV0Y2hNb2NrID0gKFxuICBtb2NrOiBNb2NrLFxuICBsb2dnaW5nRW5hYmxlZDogYm9vbGVhbixcbiAgcmVzcG9uc2VQcm94eUZuOiBNb2NrT3B0aW9uc1sncmVzcG9uc2VQcm94eUZuJ11cbik6IHZvaWQgPT4ge1xuICBmZXRjaE1vY2subW9jayhcbiAgICBtb2NrLnVybCxcbiAgICAodXJsOiBSZWdFeHAsIGZldGNoTW9ja09wdGlvbnM6IEZldGNoTW9ja09wdGlvbnMpID0+IHtcbiAgICAgIGNvbnN0IGJvZHkgPSBmZXRjaE1vY2tPcHRpb25zPy5ib2R5IHx8IHt9O1xuICAgICAgY29uc3QgaGVhZGVycyA9IGZldGNoTW9ja09wdGlvbnM/LmhlYWRlcnMgfHwge307XG4gICAgICBjb25zdCBjcmVhdGVkVVJMID0gY3JlYXRlVVJMKHVybCk7XG5cbiAgICAgIC8vIHJlcXVlc3RcbiAgICAgIGNvbnN0IHJlcXVlc3RRdWVyeSA9IHBhcnNlUXVlcnlQYXJhbXMoXG4gICAgICAgIGNyZWF0ZWRVUkwgIT09IG51bGxcbiAgICAgICAgICA/IGNyZWF0ZWRVUkwuc2VhcmNoXG4gICAgICAgICAgOiByZW1vdmVBbGxCZWZvcmVDaGFyKHVybC50b1N0cmluZygpLCAnPycpXG4gICAgICApO1xuICAgICAgY29uc3QgcmVxdWVzdEJvZHkgPSB0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycgPyBKU09OLnBhcnNlKGJvZHkpIDogYm9keTtcbiAgICAgIGNvbnN0IHJlcXVlc3RIZWFkZXJzID0gaGVhZGVycztcblxuICAgICAgLy8gcmVzcG9uc2VcbiAgICAgIGNvbnN0IHJlc3BvbnNlQm9keSA9IG1vY2sucmVzcG9uc2VGbihyZXF1ZXN0UXVlcnksIHJlcXVlc3RCb2R5KTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YTogTW9ja1Jlc3BvbnNlID0gaGFuZGxlUHJveHlGbihcbiAgICAgICAgcmVzcG9uc2VCb2R5LFxuICAgICAgICBtb2NrLFxuICAgICAgICB7XG4gICAgICAgICAgcmVxdWVzdFF1ZXJ5LFxuICAgICAgICAgIHJlcXVlc3RCb2R5LFxuICAgICAgICAgIHJlcXVlc3RIZWFkZXJzXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbnNlUHJveHlGblxuICAgICAgKTtcblxuICAgICAgY29uc3QgcmVzcG9uc2U6IEZldGNoTW9ja1Jlc3BvbnNlID0ge1xuICAgICAgICBoZWFkZXJzOiByZXNwb25zZURhdGEucmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBzdGF0dXM6IHJlc3BvbnNlRGF0YS5yZXNwb25zZUNvZGUsXG4gICAgICAgIGJvZHk6IHJlc3BvbnNlRGF0YS5yZXNwb25zZUJvZHlcbiAgICAgIH07XG5cbiAgICAgIGlmIChsb2dnaW5nRW5hYmxlZCkge1xuICAgICAgICBsb2dNb2NrKFxuICAgICAgICAgIG1vY2ssXG4gICAgICAgICAge1xuICAgICAgICAgICAgcmVxdWVzdFF1ZXJ5LFxuICAgICAgICAgICAgcmVxdWVzdEJvZHksXG4gICAgICAgICAgICByZXF1ZXN0SGVhZGVyc1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVzcG9uc2VEYXRhXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9LFxuICAgIHtcbiAgICAgIGRlbGF5OiBtb2NrLmRlbGF5XG4gICAgfVxuICApO1xufTtcblxuLyoqXG4gKiBUcmllcyB0byBjcmVhdGUgYSBuZXcgaW5zdGFjZSBvZiBVUkwoKVxuICovXG5jb25zdCBjcmVhdGVVUkwgPSAodXJsOiBSZWdFeHAgfCBzdHJpbmcpOiBVUkwgfCBudWxsID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbmV3IFVSTChgJHt1cmx9YCk7XG4gIH0gY2F0Y2ggKF8pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBjaGFycyBiZWZvcmUgc3BlY2lmaWMgY2hhciAoY2hhciBpbmNsdWRlcykuXG4gKiBJZiBjaGFyIGRvZXNuJ3QgZXhpc3QsIHJldHVybnMgYW4gZW1wdHkgc3RyaW5nLlxuICovXG5jb25zdCByZW1vdmVBbGxCZWZvcmVDaGFyID0gKHZhbHVlOiBzdHJpbmcsIGNoYXI6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIGlmICghdmFsdWUuaW5jbHVkZXMoY2hhcikpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICByZXR1cm4gYCR7dmFsdWV9YC5zcGxpdChjaGFyKS5wb3AoKTtcbn07XG4iXX0=