/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/log.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Creates a collapsed group console log of the mock's request and response.
 * @type {?}
 */
export const logMock = (/**
 * @param {?} __0
 * @param {?} __1
 * @param {?} __2
 * @return {?}
 */
({ method, url, delay }, { requestQuery, requestBody, requestHeaders }, { responseBody, responseCode, responseHeaders }) => {
    console.groupCollapsed(`${method} ${url}`);
    console.log('Status:', responseCode);
    console.log('Delay:', delay);
    console.group('Request');
    console.log('Headers:', requestHeaders);
    console.log('Query:', requestQuery);
    console.log('Body:', requestBody);
    console.groupEnd();
    console.group('Response');
    console.log('Headers:', responseHeaders);
    console.log('Body:', responseBody);
    console.groupEnd();
    console.groupEnd();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLmpzIiwic291cmNlUm9vdCI6Im5nOi8vaHR0cC1tb2Nrcy8iLCJzb3VyY2VzIjpbImxpYi91dGlscy9sb2cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBS0EsTUFBTSxPQUFPLE9BQU87Ozs7OztBQUFHLENBQ3JCLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQVEsRUFDNUIsRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLGNBQWMsRUFBZSxFQUMxRCxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsZUFBZSxFQUFnQixFQUN2RCxFQUFFO0lBQ1IsT0FBTyxDQUFDLGNBQWMsQ0FBQyxHQUFHLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBRTNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ3JDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRTdCLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDekIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDeEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDcEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDbEMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBRW5CLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDMUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDekMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDbkMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBRW5CLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUNyQixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2NrLCBNb2NrUmVxdWVzdCwgTW9ja1Jlc3BvbnNlIH0gZnJvbSAnLi8uLi9odHRwLW1vY2tzLm1vZGVsJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgY29sbGFwc2VkIGdyb3VwIGNvbnNvbGUgbG9nIG9mIHRoZSBtb2NrJ3MgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKi9cbmV4cG9ydCBjb25zdCBsb2dNb2NrID0gKFxuICB7IG1ldGhvZCwgdXJsLCBkZWxheSB9OiBNb2NrLFxuICB7IHJlcXVlc3RRdWVyeSwgcmVxdWVzdEJvZHksIHJlcXVlc3RIZWFkZXJzIH06IE1vY2tSZXF1ZXN0LFxuICB7IHJlc3BvbnNlQm9keSwgcmVzcG9uc2VDb2RlLCByZXNwb25zZUhlYWRlcnMgfTogTW9ja1Jlc3BvbnNlXG4pOiB2b2lkID0+IHtcbiAgY29uc29sZS5ncm91cENvbGxhcHNlZChgJHttZXRob2R9ICR7dXJsfWApO1xuXG4gIGNvbnNvbGUubG9nKCdTdGF0dXM6JywgcmVzcG9uc2VDb2RlKTtcbiAgY29uc29sZS5sb2coJ0RlbGF5OicsIGRlbGF5KTtcblxuICBjb25zb2xlLmdyb3VwKCdSZXF1ZXN0Jyk7XG4gIGNvbnNvbGUubG9nKCdIZWFkZXJzOicsIHJlcXVlc3RIZWFkZXJzKTtcbiAgY29uc29sZS5sb2coJ1F1ZXJ5OicsIHJlcXVlc3RRdWVyeSk7XG4gIGNvbnNvbGUubG9nKCdCb2R5OicsIHJlcXVlc3RCb2R5KTtcbiAgY29uc29sZS5ncm91cEVuZCgpO1xuXG4gIGNvbnNvbGUuZ3JvdXAoJ1Jlc3BvbnNlJyk7XG4gIGNvbnNvbGUubG9nKCdIZWFkZXJzOicsIHJlc3BvbnNlSGVhZGVycyk7XG4gIGNvbnNvbGUubG9nKCdCb2R5OicsIHJlc3BvbnNlQm9keSk7XG4gIGNvbnNvbGUuZ3JvdXBFbmQoKTtcblxuICBjb25zb2xlLmdyb3VwRW5kKCk7XG59O1xuIl19