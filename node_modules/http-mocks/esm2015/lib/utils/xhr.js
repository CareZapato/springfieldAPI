/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/xhr.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __awaiter } from "tslib";
import xhrMock, { proxy } from 'xhr-mock';
import { delay } from './delay';
import { logMock } from './log';
import { handleProxyFn } from './proxy';
/** @type {?} */
export const setupXHRMock = (/**
 * @return {?}
 */
() => {
    xhrMock.setup();
});
/** @type {?} */
export const fallbackToNetworkXHR = (/**
 * @param {?} fallbackToNetwork
 * @return {?}
 */
(fallbackToNetwork) => {
    if (fallbackToNetwork) {
        xhrMock.use(proxy);
    }
});
/** @type {?} */
export const createXHRMock = (/**
 * @param {?} mock
 * @param {?} loggingEnabled
 * @param {?=} responseProxyFn
 * @return {?}
 */
(mock, loggingEnabled, responseProxyFn) => {
    xhrMock.use(mock.method, mock.url, (/**
     * @param {?} mockRequest
     * @param {?} mockResponse
     * @return {?}
     */
    (mockRequest, mockResponse) => __awaiter(void 0, void 0, void 0, function* () {
        // request
        /** @type {?} */
        const requestQuery = mockRequest.url().query || {};
        /** @type {?} */
        const requestBody = mockRequest.body() != null ? JSON.parse(mockRequest.body()) : {};
        /** @type {?} */
        const requestHeaders = mockRequest.headers();
        // response
        /** @type {?} */
        const responseBody = mock.responseFn(requestQuery, requestBody);
        /** @type {?} */
        const responseData = handleProxyFn(responseBody, mock, {
            requestQuery,
            requestBody,
            requestHeaders
        }, responseProxyFn);
        /** @type {?} */
        const response = mockResponse
            .status(responseData.responseCode)
            .body(responseData.responseBody)
            .headers(responseData.responseHeaders);
        yield delay(mock.delay);
        if (loggingEnabled) {
            logMock(mock, {
                requestQuery,
                requestBody,
                requestHeaders
            }, responseData);
        }
        return response;
    })));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieGhyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vaHR0cC1tb2Nrcy8iLCJzb3VyY2VzIjpbImxpYi91dGlscy94aHIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxPQUFPLEVBQUUsRUFHZCxLQUFLLEVBQ04sTUFBTSxVQUFVLENBQUM7QUFFbEIsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUVoQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBRWhDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxTQUFTLENBQUM7O0FBSXhDLE1BQU0sT0FBTyxZQUFZOzs7QUFBRyxHQUFTLEVBQUU7SUFDckMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xCLENBQUMsQ0FBQTs7QUFFRCxNQUFNLE9BQU8sb0JBQW9COzs7O0FBQUcsQ0FBQyxpQkFBMEIsRUFBRSxFQUFFO0lBQ2pFLElBQUksaUJBQWlCLEVBQUU7UUFDckIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMsQ0FBQTs7QUFFRCxNQUFNLE9BQU8sYUFBYTs7Ozs7O0FBQUcsQ0FDM0IsSUFBVSxFQUNWLGNBQXVCLEVBQ3ZCLGVBQWdELEVBQzFDLEVBQUU7SUFDUixPQUFPLENBQUMsR0FBRyxDQUNULElBQUksQ0FBQyxNQUFNLEVBQ1gsSUFBSSxDQUFDLEdBQUc7Ozs7O0lBQ1IsQ0FBTyxXQUEyQixFQUFFLFlBQTZCLEVBQUUsRUFBRTs7O2NBRTdELFlBQVksR0FBRyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxJQUFJLEVBQUU7O2NBQzVDLFdBQVcsR0FDZixXQUFXLENBQUMsSUFBSSxFQUFFLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFOztjQUM1RCxjQUFjLEdBQUcsV0FBVyxDQUFDLE9BQU8sRUFBRTs7O2NBR3RDLFlBQVksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxXQUFXLENBQUM7O2NBQ3pELFlBQVksR0FBaUIsYUFBYSxDQUM5QyxZQUFZLEVBQ1osSUFBSSxFQUNKO1lBQ0UsWUFBWTtZQUNaLFdBQVc7WUFDWCxjQUFjO1NBQ2YsRUFDRCxlQUFlLENBQ2hCOztjQUVLLFFBQVEsR0FBRyxZQUFZO2FBQzFCLE1BQU0sQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDO2FBQ2pDLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDO2FBQy9CLE9BQU8sQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDO1FBRXhDLE1BQU0sS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV4QixJQUFJLGNBQWMsRUFBRTtZQUNsQixPQUFPLENBQ0wsSUFBSSxFQUNKO2dCQUNFLFlBQVk7Z0JBQ1osV0FBVztnQkFDWCxjQUFjO2FBQ2YsRUFDRCxZQUFZLENBQ2IsQ0FBQztTQUNIO1FBRUQsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQyxDQUFBLEVBQ0YsQ0FBQztBQUNKLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB4aHJNb2NrLCB7XG4gIE1vY2tSZXF1ZXN0IGFzIFhock1vY2tSZXF1ZXN0LFxuICBNb2NrUmVzcG9uc2UgYXMgWGhyTW9ja1Jlc3BvbnNlLFxuICBwcm94eVxufSBmcm9tICd4aHItbW9jayc7XG5cbmltcG9ydCB7IGRlbGF5IH0gZnJvbSAnLi9kZWxheSc7XG5cbmltcG9ydCB7IGxvZ01vY2sgfSBmcm9tICcuL2xvZyc7XG5cbmltcG9ydCB7IGhhbmRsZVByb3h5Rm4gfSBmcm9tICcuL3Byb3h5JztcblxuaW1wb3J0IHsgTW9jaywgTW9ja09wdGlvbnMsIE1vY2tSZXNwb25zZSB9IGZyb20gJy4vLi4vaHR0cC1tb2Nrcy5tb2RlbCc7XG5cbmV4cG9ydCBjb25zdCBzZXR1cFhIUk1vY2sgPSAoKTogdm9pZCA9PiB7XG4gIHhock1vY2suc2V0dXAoKTtcbn07XG5cbmV4cG9ydCBjb25zdCBmYWxsYmFja1RvTmV0d29ya1hIUiA9IChmYWxsYmFja1RvTmV0d29yazogYm9vbGVhbikgPT4ge1xuICBpZiAoZmFsbGJhY2tUb05ldHdvcmspIHtcbiAgICB4aHJNb2NrLnVzZShwcm94eSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVYSFJNb2NrID0gKFxuICBtb2NrOiBNb2NrLFxuICBsb2dnaW5nRW5hYmxlZDogYm9vbGVhbixcbiAgcmVzcG9uc2VQcm94eUZuPzogTW9ja09wdGlvbnNbJ3Jlc3BvbnNlUHJveHlGbiddXG4pOiB2b2lkID0+IHtcbiAgeGhyTW9jay51c2UoXG4gICAgbW9jay5tZXRob2QsXG4gICAgbW9jay51cmwsXG4gICAgYXN5bmMgKG1vY2tSZXF1ZXN0OiBYaHJNb2NrUmVxdWVzdCwgbW9ja1Jlc3BvbnNlOiBYaHJNb2NrUmVzcG9uc2UpID0+IHtcbiAgICAgIC8vIHJlcXVlc3RcbiAgICAgIGNvbnN0IHJlcXVlc3RRdWVyeSA9IG1vY2tSZXF1ZXN0LnVybCgpLnF1ZXJ5IHx8IHt9O1xuICAgICAgY29uc3QgcmVxdWVzdEJvZHkgPVxuICAgICAgICBtb2NrUmVxdWVzdC5ib2R5KCkgIT0gbnVsbCA/IEpTT04ucGFyc2UobW9ja1JlcXVlc3QuYm9keSgpKSA6IHt9O1xuICAgICAgY29uc3QgcmVxdWVzdEhlYWRlcnMgPSBtb2NrUmVxdWVzdC5oZWFkZXJzKCk7XG5cbiAgICAgIC8vIHJlc3BvbnNlXG4gICAgICBjb25zdCByZXNwb25zZUJvZHkgPSBtb2NrLnJlc3BvbnNlRm4ocmVxdWVzdFF1ZXJ5LCByZXF1ZXN0Qm9keSk7XG4gICAgICBjb25zdCByZXNwb25zZURhdGE6IE1vY2tSZXNwb25zZSA9IGhhbmRsZVByb3h5Rm4oXG4gICAgICAgIHJlc3BvbnNlQm9keSxcbiAgICAgICAgbW9jayxcbiAgICAgICAge1xuICAgICAgICAgIHJlcXVlc3RRdWVyeSxcbiAgICAgICAgICByZXF1ZXN0Qm9keSxcbiAgICAgICAgICByZXF1ZXN0SGVhZGVyc1xuICAgICAgICB9LFxuICAgICAgICByZXNwb25zZVByb3h5Rm5cbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gbW9ja1Jlc3BvbnNlXG4gICAgICAgIC5zdGF0dXMocmVzcG9uc2VEYXRhLnJlc3BvbnNlQ29kZSlcbiAgICAgICAgLmJvZHkocmVzcG9uc2VEYXRhLnJlc3BvbnNlQm9keSlcbiAgICAgICAgLmhlYWRlcnMocmVzcG9uc2VEYXRhLnJlc3BvbnNlSGVhZGVycyk7XG5cbiAgICAgIGF3YWl0IGRlbGF5KG1vY2suZGVsYXkpO1xuXG4gICAgICBpZiAobG9nZ2luZ0VuYWJsZWQpIHtcbiAgICAgICAgbG9nTW9jayhcbiAgICAgICAgICBtb2NrLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJlcXVlc3RRdWVyeSxcbiAgICAgICAgICAgIHJlcXVlc3RCb2R5LFxuICAgICAgICAgICAgcmVxdWVzdEhlYWRlcnNcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJlc3BvbnNlRGF0YVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfVxuICApO1xufTtcbiJdfQ==