/**
 * @fileoverview added by tsickle
 * Generated from: lib/http-mocks.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
export function MockRequest() { }
if (false) {
    /** @type {?} */
    MockRequest.prototype.requestQuery;
    /** @type {?} */
    MockRequest.prototype.requestBody;
    /** @type {?} */
    MockRequest.prototype.requestHeaders;
}
/**
 * @record
 */
export function MockResponse() { }
if (false) {
    /** @type {?} */
    MockResponse.prototype.responseBody;
    /** @type {?} */
    MockResponse.prototype.responseCode;
    /** @type {?} */
    MockResponse.prototype.responseHeaders;
}
/**
 * @record
 */
export function Mock() { }
if (false) {
    /**
     * A regular expression that should match with the URL of the HTTP request.
     * @type {?}
     */
    Mock.prototype.url;
    /**
     * HTTP method.
     * @type {?}
     */
    Mock.prototype.method;
    /**
     * A function that contains a logic that returns response data accordingly to the request (query params and payload).
     * @type {?}
     */
    Mock.prototype.responseFn;
    /**
     * Status code of the HTTP transaction. (default: `200`)
     * @type {?|undefined}
     */
    Mock.prototype.responseCode;
    /**
     * Headers of the response. (default: `{}`)
     * @type {?|undefined}
     */
    Mock.prototype.responseHeaders;
    /**
     * Time of the response delay (in milliseconds). (default: `0`)
     * @type {?|undefined}
     */
    Mock.prototype.delay;
}
/**
 * @record
 */
export function MockScenarios() { }
if (false) {
    /** @type {?} */
    MockScenarios.prototype.default;
    /* Skipping unhandled member: [mockScenario: string]: Mock[];*/
}
/**
 * @record
 */
export function MockOptions() { }
if (false) {
    /**
     * Whether pass through the request to the network if no mock exists. (default: `true`)
     * @type {?|undefined}
     */
    MockOptions.prototype.fallbackToNetwork;
    /**
     * Whether log information about request/response of the mock to the console. (default: `false`)
     * @type {?|undefined}
     */
    MockOptions.prototype.loggingEnabled;
    /**
     * Whether accept search string placed after the hashtag in URL,
     * e.g. `http://localhost:4200/#/?mockScenario=scenarioKey`. (default: `false`)
     * @type {?|undefined}
     */
    MockOptions.prototype.useLocationHash;
    /**
     * The scenario key to use for mocking. (default: `'default'`)
     * @type {?|undefined}
     */
    MockOptions.prototype.mockScenario;
    /**
     * Common response code for all mocks that can be overridden by the response code of the particular mock. (default: `200`)
     * @type {?|undefined}
     */
    MockOptions.prototype.defaultResponseCode;
    /**
     * Common response headers for all mocks that can be overridden by the response headers of the particular mock. (default: `{}`)
     * @type {?|undefined}
     */
    MockOptions.prototype.defaultResponseHeaders;
    /**
     * Common mock delay for all mocks that can be overridden by the mock delay of the particular mock. (default: `0`)
     * @type {?|undefined}
     */
    MockOptions.prototype.defaultDelay;
    /**
     * Wrapper function that applies to all mock responses.
     * Useful when you change the overall data response structure without an impact on the data.
     * @type {?|undefined}
     */
    MockOptions.prototype.responseProxyFn;
    /**
     * Disables specific mocks.
     * With this option, you can easily disable particular mocks when you're about to connect to the real API.
     * @type {?|undefined}
     */
    MockOptions.prototype.ignoredMocks;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1tb2Nrcy5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2h0dHAtbW9ja3MvIiwic291cmNlcyI6WyJsaWIvaHR0cC1tb2Nrcy5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQU9BLGlDQUlDOzs7SUFIQyxtQ0FBOEI7O0lBQzlCLGtDQUFpQjs7SUFDakIscUNBQWdDOzs7OztBQUdsQyxrQ0FJQzs7O0lBSEMsb0NBQWtCOztJQUNsQixvQ0FBcUI7O0lBQ3JCLHVDQUFpQzs7Ozs7QUFRbkMsMEJBaUNDOzs7Ozs7SUE3QkMsbUJBQVk7Ozs7O0lBS1osc0JBQW1COzs7OztJQUtuQiwwQkFHa0M7Ozs7O0lBS2xDLDRCQUFzQjs7Ozs7SUFLdEIsK0JBQWtDOzs7OztJQUtsQyxxQkFBZTs7Ozs7QUFHakIsbUNBR0M7OztJQUZDLGdDQUFnQjs7Ozs7O0FBSWxCLGlDQW9EQzs7Ozs7O0lBaERDLHdDQUE0Qjs7Ozs7SUFLNUIscUNBQXlCOzs7Ozs7SUFNekIsc0NBQTBCOzs7OztJQUsxQixtQ0FBbUM7Ozs7O0lBS25DLDBDQUE2Qjs7Ozs7SUFLN0IsNkNBQXlDOzs7OztJQUt6QyxtQ0FBc0I7Ozs7OztJQU10QixzQ0FJa0I7Ozs7OztJQU1sQixtQ0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdHlwZSBIdHRwTWV0aG9kID0gJ0dFVCcgfCAnUE9TVCcgfCAnUFVUJyB8ICdERUxFVEUnO1xuXG5leHBvcnQgdHlwZSBSZXF1ZXN0UXVlcnkgPSBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xuZXhwb3J0IHR5cGUgUmVxdWVzdEJvZHkgPSBSZWNvcmQ8c3RyaW5nLCBhbnk+IHwgbnVsbDtcblxuZXhwb3J0IHR5cGUgUmVzcG9uc2VIZWFkZXJzID0gUmVjb3JkPHN0cmluZywgYW55PjtcblxuZXhwb3J0IGludGVyZmFjZSBNb2NrUmVxdWVzdCB7XG4gIHJlcXVlc3RRdWVyeTogUmVzcG9uc2VIZWFkZXJzO1xuICByZXF1ZXN0Qm9keTogYW55O1xuICByZXF1ZXN0SGVhZGVyczogUmVzcG9uc2VIZWFkZXJzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1vY2tSZXNwb25zZSB7XG4gIHJlc3BvbnNlQm9keTogYW55O1xuICByZXNwb25zZUNvZGU6IG51bWJlcjtcbiAgcmVzcG9uc2VIZWFkZXJzOiBSZXNwb25zZUhlYWRlcnM7XG59XG5cbmV4cG9ydCB0eXBlIE1vY2tQYXJhbXMgPSBQaWNrPFxuICBNb2NrLFxuICAndXJsJyB8ICdtZXRob2QnIHwgJ3Jlc3BvbnNlQ29kZScgfCAncmVzcG9uc2VIZWFkZXJzJ1xuPjtcblxuZXhwb3J0IGludGVyZmFjZSBNb2NrIHtcbiAgLyoqXG4gICAqIEEgcmVndWxhciBleHByZXNzaW9uIHRoYXQgc2hvdWxkIG1hdGNoIHdpdGggdGhlIFVSTCBvZiB0aGUgSFRUUCByZXF1ZXN0LlxuICAgKi9cbiAgdXJsOiBSZWdFeHA7XG5cbiAgLyoqXG4gICAqIEhUVFAgbWV0aG9kLlxuICAgKi9cbiAgbWV0aG9kOiBIdHRwTWV0aG9kO1xuXG4gIC8qKlxuICAgKiBBIGZ1bmN0aW9uIHRoYXQgY29udGFpbnMgYSBsb2dpYyB0aGF0IHJldHVybnMgcmVzcG9uc2UgZGF0YSBhY2NvcmRpbmdseSB0byB0aGUgcmVxdWVzdCAocXVlcnkgcGFyYW1zIGFuZCBwYXlsb2FkKS5cbiAgICovXG4gIHJlc3BvbnNlRm46IChcbiAgICByZXF1ZXN0UXVlcnk6IFJlcXVlc3RRdWVyeSxcbiAgICByZXF1ZXN0Qm9keTogUmVxdWVzdEJvZHlcbiAgKSA9PiBNb2NrUmVzcG9uc2VbJ3Jlc3BvbnNlQm9keSddO1xuXG4gIC8qKlxuICAgKiBTdGF0dXMgY29kZSBvZiB0aGUgSFRUUCB0cmFuc2FjdGlvbi4gKGRlZmF1bHQ6IGAyMDBgKVxuICAgKi9cbiAgcmVzcG9uc2VDb2RlPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBIZWFkZXJzIG9mIHRoZSByZXNwb25zZS4gKGRlZmF1bHQ6IGB7fWApXG4gICAqL1xuICByZXNwb25zZUhlYWRlcnM/OiBSZXNwb25zZUhlYWRlcnM7XG5cbiAgLyoqXG4gICAqIFRpbWUgb2YgdGhlIHJlc3BvbnNlIGRlbGF5IChpbiBtaWxsaXNlY29uZHMpLiAoZGVmYXVsdDogYDBgKVxuICAgKi9cbiAgZGVsYXk/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTW9ja1NjZW5hcmlvcyB7XG4gIGRlZmF1bHQ6IE1vY2tbXTtcbiAgW21vY2tTY2VuYXJpbzogc3RyaW5nXTogTW9ja1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1vY2tPcHRpb25zIHtcbiAgLyoqXG4gICAqIFdoZXRoZXIgcGFzcyB0aHJvdWdoIHRoZSByZXF1ZXN0IHRvIHRoZSBuZXR3b3JrIGlmIG5vIG1vY2sgZXhpc3RzLiAoZGVmYXVsdDogYHRydWVgKVxuICAgKi9cbiAgZmFsbGJhY2tUb05ldHdvcms/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIGxvZyBpbmZvcm1hdGlvbiBhYm91dCByZXF1ZXN0L3Jlc3BvbnNlIG9mIHRoZSBtb2NrIHRvIHRoZSBjb25zb2xlLiAoZGVmYXVsdDogYGZhbHNlYClcbiAgICovXG4gIGxvZ2dpbmdFbmFibGVkPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogV2hldGhlciBhY2NlcHQgc2VhcmNoIHN0cmluZyBwbGFjZWQgYWZ0ZXIgdGhlIGhhc2h0YWcgaW4gVVJMLFxuICAgKiBlLmcuIGBodHRwOi8vbG9jYWxob3N0OjQyMDAvIy8/bW9ja1NjZW5hcmlvPXNjZW5hcmlvS2V5YC4gKGRlZmF1bHQ6IGBmYWxzZWApXG4gICAqL1xuICB1c2VMb2NhdGlvbkhhc2g/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGUgc2NlbmFyaW8ga2V5IHRvIHVzZSBmb3IgbW9ja2luZy4gKGRlZmF1bHQ6IGAnZGVmYXVsdCdgKVxuICAgKi9cbiAgbW9ja1NjZW5hcmlvPzoga2V5b2YgTW9ja1NjZW5hcmlvcztcblxuICAvKipcbiAgICogQ29tbW9uIHJlc3BvbnNlIGNvZGUgZm9yIGFsbCBtb2NrcyB0aGF0IGNhbiBiZSBvdmVycmlkZGVuIGJ5IHRoZSByZXNwb25zZSBjb2RlIG9mIHRoZSBwYXJ0aWN1bGFyIG1vY2suIChkZWZhdWx0OiBgMjAwYClcbiAgICovXG4gIGRlZmF1bHRSZXNwb25zZUNvZGU/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIENvbW1vbiByZXNwb25zZSBoZWFkZXJzIGZvciBhbGwgbW9ja3MgdGhhdCBjYW4gYmUgb3ZlcnJpZGRlbiBieSB0aGUgcmVzcG9uc2UgaGVhZGVycyBvZiB0aGUgcGFydGljdWxhciBtb2NrLiAoZGVmYXVsdDogYHt9YClcbiAgICovXG4gIGRlZmF1bHRSZXNwb25zZUhlYWRlcnM/OiBSZXNwb25zZUhlYWRlcnM7XG5cbiAgLyoqXG4gICAqIENvbW1vbiBtb2NrIGRlbGF5IGZvciBhbGwgbW9ja3MgdGhhdCBjYW4gYmUgb3ZlcnJpZGRlbiBieSB0aGUgbW9jayBkZWxheSBvZiB0aGUgcGFydGljdWxhciBtb2NrLiAoZGVmYXVsdDogYDBgKVxuICAgKi9cbiAgZGVmYXVsdERlbGF5PzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBXcmFwcGVyIGZ1bmN0aW9uIHRoYXQgYXBwbGllcyB0byBhbGwgbW9jayByZXNwb25zZXMuXG4gICAqIFVzZWZ1bCB3aGVuIHlvdSBjaGFuZ2UgdGhlIG92ZXJhbGwgZGF0YSByZXNwb25zZSBzdHJ1Y3R1cmUgd2l0aG91dCBhbiBpbXBhY3Qgb24gdGhlIGRhdGEuXG4gICAqL1xuICByZXNwb25zZVByb3h5Rm4/OiAoXG4gICAgcmVzcG9uc2VCb2R5OiBhbnksIC8vIFRoZSByZXN1bHQgb2YgdGhlIGByZXNwb25zZUZuOiAocmVxdWVzdFF1ZXJ5OiBSZXF1ZXN0UXVlcnksIHJlcXVlc3RCb2R5OiBSZXF1ZXN0Qm9keSkgPT4gYW55YFxuICAgIG1vY2tQYXJhbXM6IE1vY2tQYXJhbXMsXG4gICAgbW9ja1JlcXVlc3Q6IE1vY2tSZXF1ZXN0XG4gICkgPT4gTW9ja1Jlc3BvbnNlO1xuXG4gIC8qKlxuICAgKiBEaXNhYmxlcyBzcGVjaWZpYyBtb2Nrcy5cbiAgICogV2l0aCB0aGlzIG9wdGlvbiwgeW91IGNhbiBlYXNpbHkgZGlzYWJsZSBwYXJ0aWN1bGFyIG1vY2tzIHdoZW4geW91J3JlIGFib3V0IHRvIGNvbm5lY3QgdG8gdGhlIHJlYWwgQVBJLlxuICAgKi9cbiAgaWdub3JlZE1vY2tzPzogUmVnRXhwW107XG59XG4iXX0=